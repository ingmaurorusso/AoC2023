#include <algorithm>
#include <array>
#include <exception>
#include <fstream>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <string_view>
#include <unordered_map>
#include <unordered_set>
#include <vector>

namespace{

constexpr std::string_view Input =
false ?

"1,0,1~1,2,1\n"
"0,0,2~2,0,2\n"
"0,2,3~2,2,3\n"
"0,0,4~0,2,4\n"
"2,0,5~2,2,5\n"
"0,1,6~2,1,6\n"
"1,1,8~1,1,9\n"

:

"6,0,119~7,0,119\n"
"2,3,41~5,3,41\n"
"4,3,155~5,3,155\n"
"3,6,166~3,9,166\n"
"0,1,200~0,1,201\n"
"4,0,153~4,1,153\n"
"1,5,267~4,5,267\n"
"1,0,191~4,0,191\n"
"3,7,257~3,9,257\n"
"5,0,75~5,2,75\n"
"3,7,223~5,7,223\n"
"3,1,296~3,3,296\n"
"0,8,275~3,8,275\n"
"7,2,284~9,2,284\n"
"2,3,101~2,4,101\n"
"3,9,215~3,9,218\n"
"6,5,92~6,5,93\n"
"8,6,221~8,9,221\n"
"7,2,287~7,3,287\n"
"4,7,336~7,7,336\n"
"6,7,214~6,9,214\n"
"1,1,195~1,3,195\n"
"9,3,299~9,7,299\n"
"6,6,238~6,9,238\n"
"0,6,200~0,7,200\n"
"4,6,159~4,9,159\n"
"5,4,241~5,6,241\n"
"8,5,300~8,8,300\n"
"4,6,310~4,9,310\n"
"7,0,259~9,0,259\n"
"9,9,201~9,9,204\n"
"8,8,56~8,9,56\n"
"3,2,208~3,4,208\n"
"6,3,19~6,5,19\n"
"0,3,129~1,3,129\n"
"8,6,201~8,7,201\n"
"7,5,335~7,7,335\n"
"7,3,262~7,5,262\n"
"5,6,293~5,8,293\n"
"8,2,266~8,5,266\n"
"6,8,165~6,9,165\n"
"7,5,57~7,7,57\n"
"5,2,63~5,2,63\n"
"0,7,140~0,8,140\n"
"1,1,259~1,4,259\n"
"1,2,198~1,4,198\n"
"8,0,193~9,0,193\n"
"9,4,222~9,4,223\n"
"6,5,91~6,7,91\n"
"5,2,265~5,5,265\n"
"5,5,345~5,8,345\n"
"6,3,96~6,3,98\n"
"7,9,67~7,9,68\n"
"3,2,274~3,3,274\n"
"4,6,287~6,6,287\n"
"1,3,227~1,5,227\n"
"5,1,86~5,4,86\n"
"9,5,184~9,6,184\n"
"5,6,165~5,6,168\n"
"2,5,33~2,8,33\n"
"6,8,188~7,8,188\n"
"2,6,121~2,6,123\n"
"8,6,220~8,9,220\n"
"6,6,99~8,6,99\n"
"0,0,142~1,0,142\n"
"6,8,101~6,8,104\n"
"2,0,320~4,0,320\n"
"6,5,195~6,6,195\n"
"3,3,45~5,3,45\n"
"1,7,23~1,9,23\n"
"0,5,302~0,5,303\n"
"5,4,316~7,4,316\n"
"3,2,248~3,4,248\n"
"2,0,86~4,0,86\n"
"2,8,200~4,8,200\n"
"0,7,181~0,8,181\n"
"5,1,159~5,3,159\n"
"1,4,224~3,4,224\n"
"7,9,75~9,9,75\n"
"7,0,281~7,1,281\n"
"4,6,162~7,6,162\n"
"0,5,189~0,6,189\n"
"6,4,221~9,4,221\n"
"7,2,150~9,2,150\n"
"3,3,210~4,3,210\n"
"8,3,224~8,4,224\n"
"4,6,204~4,9,204\n"
"8,2,208~8,4,208\n"
"6,6,65~6,8,65\n"
"1,7,188~1,9,188\n"
"0,7,137~0,7,137\n"
"7,1,293~7,1,293\n"
"2,4,58~4,4,58\n"
"7,5,184~7,7,184\n"
"4,0,9~4,2,9\n"
"5,9,59~7,9,59\n"
"3,7,57~3,9,57\n"
"3,4,359~6,4,359\n"
"3,2,356~5,2,356\n"
"3,7,322~5,7,322\n"
"0,4,27~3,4,27\n"
"4,3,233~4,5,233\n"
"4,7,348~4,9,348\n"
"3,1,260~3,3,260\n"
"3,2,151~5,2,151\n"
"1,0,144~2,0,144\n"
"7,2,182~7,3,182\n"
"5,7,270~5,7,270\n"
"0,4,166~0,6,166\n"
"4,1,253~7,1,253\n"
"8,0,3~9,0,3\n"
"8,7,296~8,9,296\n"
"6,9,166~8,9,166\n"
"0,8,23~0,9,23\n"
"7,1,200~7,2,200\n"
"5,4,180~7,4,180\n"
"0,4,5~0,7,5\n"
"2,8,290~4,8,290\n"
"1,7,314~1,9,314\n"
"7,1,97~7,3,97\n"
"7,4,259~9,4,259\n"
"3,4,135~4,4,135\n"
"7,5,295~9,5,295\n"
"1,0,97~1,1,97\n"
"2,2,30~2,5,30\n"
"2,3,201~5,3,201\n"
"9,6,245~9,9,245\n"
"4,4,24~4,6,24\n"
"3,7,48~3,7,51\n"
"3,3,340~5,3,340\n"
"4,4,330~4,7,330\n"
"1,8,280~4,8,280\n"
"2,0,243~3,0,243\n"
"7,2,232~8,2,232\n"
"7,0,61~7,3,61\n"
"8,7,174~8,9,174\n"
"5,4,3~8,4,3\n"
"7,5,342~9,5,342\n"
"2,6,156~4,6,156\n"
"4,0,68~4,0,69\n"
"7,4,291~8,4,291\n"
"2,7,291~3,7,291\n"
"5,3,143~8,3,143\n"
"9,1,256~9,3,256\n"
"1,4,280~1,6,280\n"
"9,1,184~9,1,186\n"
"5,9,162~7,9,162\n"
"1,3,301~4,3,301\n"
"1,6,203~3,6,203\n"
"9,2,7~9,4,7\n"
"3,1,5~5,1,5\n"
"8,1,56~8,3,56\n"
"0,8,189~0,8,191\n"
"5,3,79~5,6,79\n"
"8,8,27~8,8,30\n"
"4,2,311~4,4,311\n"
"7,9,183~9,9,183\n"
"5,9,64~7,9,64\n"
"7,2,44~7,4,44\n"
"6,3,210~7,3,210\n"
"3,5,209~3,5,209\n"
"6,1,188~8,1,188\n"
"7,0,85~9,0,85\n"
"5,1,203~8,1,203\n"
"2,5,199~2,7,199\n"
"2,2,43~4,2,43\n"
"6,9,317~9,9,317\n"
"2,6,45~5,6,45\n"
"7,7,19~9,7,19\n"
"9,7,174~9,8,174\n"
"8,4,50~8,4,52\n"
"6,6,192~6,8,192\n"
"6,6,247~8,6,247\n"
"3,8,50~3,8,52\n"
"4,3,268~4,5,268\n"
"1,5,249~4,5,249\n"
"2,5,209~2,7,209\n"
"2,5,66~2,7,66\n"
"2,2,116~2,4,116\n"
"2,3,78~2,4,78\n"
"4,1,336~4,3,336\n"
"0,3,14~0,3,16\n"
"1,1,313~1,3,313\n"
"3,6,226~5,6,226\n"
"1,6,39~1,8,39\n"
"4,5,133~4,5,135\n"
"0,0,316~0,3,316\n"
"9,3,255~9,6,255\n"
"2,7,56~5,7,56\n"
"1,2,265~1,2,268\n"
"5,6,130~5,8,130\n"
"0,3,13~0,4,13\n"
"5,6,351~5,9,351\n"
"8,5,158~8,6,158\n"
"4,9,161~5,9,161\n"
"1,8,185~1,9,185\n"
"5,1,140~5,3,140\n"
"8,0,196~8,0,198\n"
"5,8,5~7,8,5\n"
"2,1,301~4,1,301\n"
"6,4,269~6,5,269\n"
"7,8,146~8,8,146\n"
"2,4,44~4,4,44\n"
"6,5,61~6,7,61\n"
"5,4,115~7,4,115\n"
"7,2,213~7,3,213\n"
"0,2,82~0,5,82\n"
"7,7,142~7,7,143\n"
"5,2,249~5,5,249\n"
"9,7,243~9,9,243\n"
"0,0,190~2,0,190\n"
"1,6,341~3,6,341\n"
"7,3,59~7,5,59\n"
"6,6,69~6,8,69\n"
"1,5,206~3,5,206\n"
"3,3,280~4,3,280\n"
"5,9,195~8,9,195\n"
"3,4,197~6,4,197\n"
"5,5,175~5,7,175\n"
"5,1,316~8,1,316\n"
"9,0,287~9,2,287\n"
"7,3,267~7,3,270\n"
"7,0,120~9,0,120\n"
"0,3,300~0,5,300\n"
"9,5,228~9,5,230\n"
"4,2,67~7,2,67\n"
"1,1,33~4,1,33\n"
"8,4,338~8,6,338\n"
"5,4,179~5,8,179\n"
"1,6,10~4,6,10\n"
"7,1,26~8,1,26\n"
"4,9,292~4,9,295\n"
"3,2,6~3,4,6\n"
"7,3,204~7,3,204\n"
"3,2,73~3,2,74\n"
"7,6,215~9,6,215\n"
"4,0,139~4,3,139\n"
"6,9,62~8,9,62\n"
"6,4,266~6,7,266\n"
"0,3,59~0,5,59\n"
"4,7,1~4,9,1\n"
"6,1,118~8,1,118\n"
"6,5,264~7,5,264\n"
"6,3,202~8,3,202\n"
"9,4,231~9,6,231\n"
"6,5,175~8,5,175\n"
"7,2,75~7,4,75\n"
"3,0,150~3,1,150\n"
"4,8,322~6,8,322\n"
"3,5,52~4,5,52\n"
"2,7,40~5,7,40\n"
"2,1,11~3,1,11\n"
"6,9,50~7,9,50\n"
"0,9,66~2,9,66\n"
"6,6,144~8,6,144\n"
"2,3,34~2,5,34\n"
"7,0,101~7,3,101\n"
"2,0,259~5,0,259\n"
"4,0,256~4,0,257\n"
"6,2,2~6,4,2\n"
"3,4,137~3,5,137\n"
"2,0,265~2,1,265\n"
"5,5,164~5,7,164\n"
"5,2,194~8,2,194\n"
"5,3,348~6,3,348\n"
"6,7,52~9,7,52\n"
"7,4,225~8,4,225\n"
"3,2,88~3,4,88\n"
"1,9,263~3,9,263\n"
"0,0,272~0,2,272\n"
"7,6,199~8,6,199\n"
"6,3,290~8,3,290\n"
"4,6,131~6,6,131\n"
"5,4,286~5,5,286\n"
"7,6,204~7,6,206\n"
"3,5,315~6,5,315\n"
"9,6,50~9,6,51\n"
"1,5,217~4,5,217\n"
"6,9,182~8,9,182\n"
"0,2,103~2,2,103\n"
"3,1,62~5,1,62\n"
"3,9,290~5,9,290\n"
"5,0,87~7,0,87\n"
"2,7,212~4,7,212\n"
"8,1,146~8,2,146\n"
"4,2,229~4,2,231\n"
"7,3,93~9,3,93\n"
"5,0,237~5,0,240\n"
"3,7,258~3,9,258\n"
"4,5,184~4,7,184\n"
"6,1,294~9,1,294\n"
"5,1,193~7,1,193\n"
"4,0,165~6,0,165\n"
"0,8,184~3,8,184\n"
"0,2,136~0,3,136\n"
"0,1,197~2,1,197\n"
"1,4,139~1,4,140\n"
"6,9,326~6,9,327\n"
"6,6,207~6,7,207\n"
"4,9,315~5,9,315\n"
"1,7,205~1,9,205\n"
"8,6,174~8,6,175\n"
"1,4,98~4,4,98\n"
"4,9,107~7,9,107\n"
"8,0,90~8,2,90\n"
"3,4,86~3,7,86\n"
"0,5,292~2,5,292\n"
"0,2,193~0,4,193\n"
"7,0,17~9,0,17\n"
"0,4,109~2,4,109\n"
"2,4,289~2,6,289\n"
"7,7,205~7,9,205\n"
"6,7,209~7,7,209\n"
"6,5,87~8,5,87\n"
"0,7,10~1,7,10\n"
"8,6,49~8,7,49\n"
"3,5,48~3,5,51\n"
"4,6,60~4,6,62\n"
"4,0,249~4,3,249\n"
"6,0,319~6,2,319\n"
"7,6,155~9,6,155\n"
"0,0,106~0,3,106\n"
"0,5,294~0,5,296\n"
"8,7,290~8,7,291\n"
"9,3,111~9,5,111\n"
"3,8,207~4,8,207\n"
"6,7,150~8,7,150\n"
"2,8,211~5,8,211\n"
"9,9,6~9,9,7\n"
"0,5,259~2,5,259\n"
"3,4,57~4,4,57\n"
"5,4,259~5,4,261\n"
"7,0,274~7,3,274\n"
"3,9,210~6,9,210\n"
"6,3,323~6,5,323\n"
"3,5,320~3,8,320\n"
"3,0,265~4,0,265\n"
"1,5,31~1,7,31\n"
"9,2,50~9,4,50\n"
"1,8,321~3,8,321\n"
"7,3,275~7,6,275\n"
"3,7,267~5,7,267\n"
"3,4,335~3,6,335\n"
"2,6,143~2,8,143\n"
"4,8,184~4,9,184\n"
"2,2,298~2,4,298\n"
"8,5,249~8,8,249\n"
"7,0,15~7,2,15\n"
"0,4,124~1,4,124\n"
"7,3,252~9,3,252\n"
"1,0,188~1,2,188\n"
"9,4,217~9,6,217\n"
"6,3,194~6,6,194\n"
"6,3,207~8,3,207\n"
"4,6,209~6,6,209\n"
"4,2,251~7,2,251\n"
"1,5,33~1,7,33\n"
"5,3,147~6,3,147\n"
"6,3,179~9,3,179\n"
"5,3,196~6,3,196\n"
"8,0,258~8,2,258\n"
"8,6,219~9,6,219\n"
"9,5,13~9,8,13\n"
"1,7,231~1,9,231\n"
"5,6,21~8,6,21\n"
"3,2,92~3,5,92\n"
"0,8,61~3,8,61\n"
"0,0,145~0,2,145\n"
"2,7,86~2,9,86\n"
"7,0,199~7,3,199\n"
"3,3,43~4,3,43\n"
"4,5,223~4,5,225\n"
"8,6,100~8,6,103\n"
"0,3,194~0,3,197\n"
"4,9,170~5,9,170\n"
"5,4,262~6,4,262\n"
"0,3,77~2,3,77\n"
"4,5,294~6,5,294\n"
"2,2,62~2,4,62\n"
"4,2,153~4,4,153\n"
"8,8,224~9,8,224\n"
"1,8,70~2,8,70\n"
"7,8,193~8,8,193\n"
"2,0,151~5,0,151\n"
"1,4,59~2,4,59\n"
"7,8,294~7,8,296\n"
"9,9,57~9,9,59\n"
"3,5,181~3,7,181\n"
"1,6,342~1,6,344\n"
"0,4,7~2,4,7\n"
"4,1,52~4,3,52\n"
"4,4,348~4,5,348\n"
"9,1,261~9,5,261\n"
"0,0,211~0,1,211\n"
"1,2,232~1,4,232\n"
"0,4,173~3,4,173\n"
"5,5,93~5,8,93\n"
"1,4,106~3,4,106\n"
"5,0,345~7,0,345\n"
"7,1,73~7,1,74\n"
"8,6,251~8,7,251\n"
"1,1,9~2,1,9\n"
"7,6,316~9,6,316\n"
"3,6,273~3,6,276\n"
"5,5,169~5,7,169\n"
"2,9,322~2,9,324\n"
"3,4,95~3,6,95\n"
"7,6,39~9,6,39\n"
"5,8,229~7,8,229\n"
"2,5,283~5,5,283\n"
"7,1,336~7,3,336\n"
"4,6,59~7,6,59\n"
"7,0,71~7,3,71\n"
"3,3,95~4,3,95\n"
"6,2,140~6,4,140\n"
"6,3,245~7,3,245\n"
"2,2,301~4,2,301\n"
"5,7,311~5,9,311\n"
"6,1,278~8,1,278\n"
"4,1,227~4,2,227\n"
"0,5,27~0,7,27\n"
"5,6,228~5,8,228\n"
"3,6,172~4,6,172\n"
"2,0,268~4,0,268\n"
"5,1,250~5,4,250\n"
"1,7,276~1,9,276\n"
"6,2,148~6,4,148\n"
"8,2,11~9,2,11\n"
"0,7,196~0,7,198\n"
"7,0,1~9,0,1\n"
"2,4,353~2,6,353\n"
"1,0,12~1,1,12\n"
"5,9,57~7,9,57\n"
"4,6,335~4,8,335\n"
"9,4,162~9,6,162\n"
"2,9,287~5,9,287\n"
"4,5,270~6,5,270\n"
"1,6,106~2,6,106\n"
"6,1,11~9,1,11\n"
"2,4,36~2,5,36\n"
"8,5,311~8,8,311\n"
"2,0,44~2,0,47\n"
"6,3,338~6,4,338\n"
"0,8,116~1,8,116\n"
"4,9,110~4,9,112\n"
"0,6,281~1,6,281\n"
"3,6,160~3,9,160\n"
"1,6,277~1,8,277\n"
"9,2,328~9,4,328\n"
"9,4,64~9,5,64\n"
"3,9,105~6,9,105\n"
"4,6,318~4,7,318\n"
"8,8,287~8,9,287\n"
"5,3,89~5,3,91\n"
"0,5,299~2,5,299\n"
"9,2,12~9,3,12\n"
"0,8,186~2,8,186\n"
"5,3,138~6,3,138\n"
"8,4,87~8,4,87\n"
"6,7,43~9,7,43\n"
"2,1,184~3,1,184\n"
"2,6,288~2,9,288\n"
"3,0,313~3,0,313\n"
"3,9,117~5,9,117\n"
"8,3,205~9,3,205\n"
"3,6,360~7,6,360\n"
"2,9,327~2,9,330\n"
"3,0,311~3,2,311\n"
"5,3,87~5,4,87\n"
"7,7,348~7,7,350\n"
"8,5,200~8,7,200\n"
"4,6,298~6,6,298\n"
"7,9,289~8,9,289\n"
"2,5,321~2,6,321\n"
"9,5,45~9,8,45\n"
"5,8,2~6,8,2\n"
"7,9,299~8,9,299\n"
"9,7,177~9,8,177\n"
"1,8,38~3,8,38\n"
"4,9,309~5,9,309\n"
"7,1,18~7,1,20\n"
"0,1,269~0,3,269\n"
"2,3,258~2,4,258\n"
"4,1,117~6,1,117\n"
"1,7,360~2,7,360\n"
"6,8,286~9,8,286\n"
"2,1,205~5,1,205\n"
"4,8,340~4,8,342\n"
"1,8,216~3,8,216\n"
"2,0,240~2,3,240\n"
"3,7,102~6,7,102\n"
"6,1,2~8,1,2\n"
"1,3,187~1,4,187\n"
"3,2,184~6,2,184\n"
"2,2,255~2,4,255\n"
"4,6,289~7,6,289\n"
"8,4,289~8,8,289\n"
"4,8,87~7,8,87\n"
"0,2,128~3,2,128\n"
"6,0,348~7,0,348\n"
"1,2,263~3,2,263\n"
"8,2,104~8,5,104\n"
"0,0,122~2,0,122\n"
"2,2,64~2,3,64\n"
"6,7,70~6,9,70\n"
"6,4,5~9,4,5\n"
"0,9,49~2,9,49\n"
"5,0,235~7,0,235\n"
"0,1,35~3,1,35\n"
"1,5,30~1,6,30\n"
"5,8,90~5,9,90\n"
"1,9,316~3,9,316\n"
"4,9,284~7,9,284\n"
"0,9,209~3,9,209\n"
"1,2,180~2,2,180\n"
"9,6,111~9,8,111\n"
"8,5,304~8,8,304\n"
"5,1,98~7,1,98\n"
"4,2,87~6,2,87\n"
"7,1,292~7,3,292\n"
"9,6,161~9,8,161\n"
"8,0,277~8,3,277\n"
"6,0,79~6,1,79\n"
"1,4,180~2,4,180\n"
"9,4,166~9,7,166\n"
"0,0,7~2,0,7\n"
"5,5,251~7,5,251\n"
"1,7,343~1,9,343\n"
"9,5,54~9,9,54\n"
"7,6,178~7,8,178\n"
"4,3,18~4,6,18\n"
"2,4,42~2,6,42\n"
"8,5,75~8,5,78\n"
"7,3,353~8,3,353\n"
"1,7,88~1,9,88\n"
"3,0,149~3,3,149\n"
"1,6,326~3,6,326\n"
"2,7,59~2,8,59\n"
"6,1,345~8,1,345\n"
"5,9,314~7,9,314\n"
"7,6,346~7,9,346\n"
"6,7,357~6,9,357\n"
"1,8,69~3,8,69\n"
"5,3,58~7,3,58\n"
"0,2,10~0,4,10\n"
"1,1,185~3,1,185\n"
"5,7,196~8,7,196\n"
"1,3,36~3,3,36\n"
"2,5,149~3,5,149\n"
"9,7,287~9,9,287\n"
"4,4,132~4,6,132\n"
"3,0,154~4,0,154\n"
"6,3,235~6,6,235\n"
"5,3,352~5,4,352\n"
"5,8,326~9,8,326\n"
"9,8,327~9,8,327\n"
"5,3,298~5,5,298\n"
"0,3,309~4,3,309\n"
"0,7,316~2,7,316\n"
"4,0,84~4,2,84\n"
"3,4,254~3,7,254\n"
"5,3,345~6,3,345\n"
"5,6,355~7,6,355\n"
"2,4,234~2,6,234\n"
"5,6,86~5,8,86\n"
"1,2,55~1,2,57\n"
"9,8,164~9,8,166\n"
"6,7,88~6,9,88\n"
"9,7,189~9,9,189\n"
"2,4,47~2,6,47\n"
"3,9,211~3,9,213\n"
"6,7,145~6,9,145\n"
"0,0,139~0,2,139\n"
"8,5,292~8,5,294\n"
"0,4,175~0,6,175\n"
"9,6,22~9,8,22\n"
"2,5,211~2,5,214\n"
"2,4,55~5,4,55\n"
"2,0,153~2,2,153\n"
"1,2,100~1,4,100\n"
"1,9,202~3,9,202\n"
"4,6,284~4,8,284\n"
"1,9,350~4,9,350\n"
"8,3,157~8,6,157\n"
"1,1,78~1,2,78\n"
"6,1,80~9,1,80\n"
"1,9,167~4,9,167\n"
"9,3,264~9,3,267\n"
"6,4,318~9,4,318\n"
"2,3,236~2,5,236\n"
"2,6,257~2,7,257\n"
"8,6,73~9,6,73\n"
"2,0,42~2,0,43\n"
"1,0,326~1,0,327\n"
"0,7,326~0,7,327\n"
"1,3,57~1,3,60\n"
"3,9,71~6,9,71\n"
"7,0,103~7,3,103\n"
"2,5,2~2,5,5\n"
"0,2,191~1,2,191\n"
"6,4,321~6,8,321\n"
"1,8,203~4,8,203\n"
"6,7,241~9,7,241\n"
"0,4,293~2,4,293\n"
"6,2,143~8,2,143\n"
"2,5,58~4,5,58\n"
"2,2,127~2,4,127\n"
"7,4,121~7,5,121\n"
"3,4,209~5,4,209\n"
"0,1,245~0,3,245\n"
"6,8,230~8,8,230\n"
"2,5,239~6,5,239\n"
"0,3,132~0,4,132\n"
"6,2,227~6,3,227\n"
"2,7,144~2,9,144\n"
"1,1,154~1,2,154\n"
"7,3,160~9,3,160\n"
"4,5,144~5,5,144\n"
"6,2,340~6,4,340\n"
"9,9,61~9,9,64\n"
"6,4,116~8,4,116\n"
"7,1,191~7,3,191\n"
"7,6,357~9,6,357\n"
"2,2,264~2,2,266\n"
"5,0,234~5,3,234\n"
"3,5,329~6,5,329\n"
"7,7,180~7,9,180\n"
"1,0,194~1,0,196\n"
"4,2,137~4,3,137\n"
"9,0,10~9,2,10\n"
"0,5,263~0,6,263\n"
"3,2,272~3,4,272\n"
"1,6,210~3,6,210\n"
"1,3,292~2,3,292\n"
"3,7,316~5,7,316\n"
"2,6,343~2,6,345\n"
"3,0,67~3,2,67\n"
"0,1,317~0,3,317\n"
"3,7,3~6,7,3\n"
"1,0,186~1,2,186\n"
"4,4,74~4,5,74\n"
"5,7,231~5,9,231\n"
"0,1,78~0,3,78\n"
"9,4,186~9,7,186\n"
"2,2,49~2,2,49\n"
"3,2,345~6,2,345\n"
"6,4,10~9,4,10\n"
"0,8,313~3,8,313\n"
"5,1,354~5,3,354\n"
"2,0,326~2,1,326\n"
"7,3,265~8,3,265\n"
"0,0,271~0,2,271\n"
"2,8,134~4,8,134\n"
"5,6,83~5,8,83\n"
"0,1,127~2,1,127\n"
"4,6,153~4,8,153\n"
"3,2,203~3,3,203\n"
"3,5,134~3,6,134\n"
"1,8,192~2,8,192\n"
"1,5,11~4,5,11\n"
"8,2,211~8,5,211\n"
"9,5,244~9,8,244\n"
"0,4,179~1,4,179\n"
"6,1,23~6,4,23\n"
"0,7,29~0,8,29\n"
"6,8,47~9,8,47\n"
"2,9,199~4,9,199\n"
"2,2,182~2,2,184\n"
"1,6,225~3,6,225\n"
"3,5,344~3,7,344\n"
"6,6,72~9,6,72\n"
"1,7,331~4,7,331\n"
"4,3,319~4,5,319\n"
"1,7,312~1,9,312\n"
"0,0,266~0,2,266\n"
"1,8,109~1,8,111\n"
"6,5,100~6,7,100\n"
"9,5,16~9,7,16\n"
"8,4,307~8,6,307\n"
"5,3,357~5,4,357\n"
"9,1,95~9,4,95\n"
"0,5,252~1,5,252\n"
"7,6,81~8,6,81\n"
"8,0,112~8,3,112\n"
"9,9,320~9,9,322\n"
"8,5,340~8,6,340\n"
"6,4,26~6,5,26\n"
"2,6,224~3,6,224\n"
"7,4,186~7,4,189\n"
"5,6,343~8,6,343\n"
"8,4,228~8,5,228\n"
"4,5,143~6,5,143\n"
"9,1,207~9,3,207\n"
"1,2,63~1,5,63\n"
"6,6,98~6,9,98\n"
"9,6,263~9,8,263\n"
"6,3,53~9,3,53\n"
"3,2,19~3,4,19\n"
"4,2,44~4,2,45\n"
"2,8,291~4,8,291\n"
"6,4,307~6,6,307\n"
"6,6,135~6,8,135\n"
"7,6,234~9,6,234\n"
"2,4,19~2,4,20\n"
"2,7,171~5,7,171\n"
"1,6,108~1,8,108\n"
"5,6,38~5,9,38\n"
"2,6,140~2,8,140\n"
"5,9,164~5,9,165\n"
"2,1,258~2,2,258\n"
"9,6,267~9,7,267\n"
"6,8,100~7,8,100\n"
"1,9,319~4,9,319\n"
"2,2,233~5,2,233\n"
"1,9,44~2,9,44\n"
"2,3,114~2,5,114\n"
"1,0,38~1,1,38\n"
"8,5,176~8,7,176\n"
"4,0,255~4,1,255\n"
"4,3,198~7,3,198\n"
"3,7,172~7,7,172\n"
"4,5,197~4,6,197\n"
"8,9,248~9,9,248\n"
"1,7,85~4,7,85\n"
"4,5,353~6,5,353\n"
"4,6,171~7,6,171\n"
"3,5,221~3,7,221\n"
"1,7,132~1,9,132\n"
"3,1,229~5,1,229\n"
"3,6,129~3,8,129\n"
"4,8,292~6,8,292\n"
"4,2,199~6,2,199\n"
"4,8,198~6,8,198\n"
"7,3,356~7,5,356\n"
"5,0,342~5,3,342\n"
"8,2,188~8,2,191\n"
"7,6,293~7,8,293\n"
"6,4,354~6,8,354\n"
"3,4,113~5,4,113\n"
"0,0,275~0,0,277\n"
"4,6,47~4,8,47\n"
"2,4,2~4,4,2\n"
"2,5,57~2,7,57\n"
"3,1,83~5,1,83\n"
"0,3,133~1,3,133\n"
"0,5,26~2,5,26\n"
"4,8,349~6,8,349\n"
"3,5,349~4,5,349\n"
"2,3,291~2,6,291\n"
"7,5,42~7,5,44\n"
"7,7,63~7,9,63\n"
"3,4,259~3,6,259\n"
"9,4,18~9,6,18\n"
"0,8,214~2,8,214\n"
"1,8,124~4,8,124\n"
"7,2,337~7,5,337\n"
"7,4,304~7,7,304\n"
"0,9,197~2,9,197\n"
"2,8,197~4,8,197\n"
"1,5,61~1,7,61\n"
"2,9,259~5,9,259\n"
"3,8,295~5,8,295\n"
"8,2,148~9,2,148\n"
"9,4,226~9,6,226\n"
"2,1,39~2,4,39\n"
"9,7,190~9,7,191\n"
"1,4,226~3,4,226\n"
"5,0,6~6,0,6\n"
"6,6,296~6,8,296\n"
"1,7,185~2,7,185\n"
"2,4,23~2,6,23\n"
"2,0,118~2,1,118\n"
"2,3,57~4,3,57\n"
"8,8,5~8,8,6\n"
"0,5,356~2,5,356\n"
"2,4,172~3,4,172\n"
"0,7,64~0,9,64\n"
"2,4,336~4,4,336\n"
"7,7,6~9,7,6\n"
"1,8,297~2,8,297\n"
"7,3,40~7,7,40\n"
"8,4,146~8,7,146\n"
"1,6,179~4,6,179\n"
"5,8,41~5,8,41\n"
"3,3,247~3,6,247\n"
"1,3,199~1,4,199\n"
"4,6,266~5,6,266\n"
"1,3,91~3,3,91\n"
"0,0,248~0,1,248\n"
"1,0,328~1,2,328\n"
"1,7,206~1,9,206\n"
"3,1,87~6,1,87\n"
"4,5,296~4,7,296\n"
"6,1,25~9,1,25\n"
"0,4,191~0,6,191\n"
"6,0,280~8,0,280\n"
"3,5,177~3,7,177\n"
"1,0,119~4,0,119\n"
"1,0,270~1,2,270\n"
"2,4,333~4,4,333\n"
"7,2,183~7,5,183\n"
"8,7,149~9,7,149\n"
"3,5,15~3,8,15\n"
"3,2,116~6,2,116\n"
"2,7,190~2,9,190\n"
"6,8,66~6,8,68\n"
"3,1,70~3,3,70\n"
"8,0,289~9,0,289\n"
"6,5,132~6,8,132\n"
"4,7,187~5,7,187\n"
"9,8,169~9,8,171\n"
"6,5,254~6,7,254\n"
"2,6,117~2,6,119\n"
"1,6,60~3,6,60\n"
"6,5,356~6,7,356\n"
"8,1,283~8,3,283\n"
"5,2,66~5,3,66\n"
"8,1,107~8,4,107\n"
"9,0,263~9,2,263\n"
"6,0,219~8,0,219\n"
"4,0,83~6,0,83\n"
"0,4,254~0,7,254\n"
"6,2,119~6,2,120\n"
"6,7,104~6,7,105\n"
"9,4,188~9,6,188\n"
"9,3,87~9,5,87\n"
"3,5,131~3,8,131\n"
"4,8,346~6,8,346\n"
"5,0,115~5,2,115\n"
"6,2,256~6,4,256\n"
"5,2,47~5,4,47\n"
"7,3,119~7,5,119\n"
"5,6,194~5,9,194\n"
"3,5,24~3,7,24\n"
"6,6,44~6,9,44\n"
"9,6,83~9,6,85\n"
"5,3,114~5,4,114\n"
"4,5,72~7,5,72\n"
"0,9,24~2,9,24\n"
"4,4,351~4,6,351\n"
"5,2,257~8,2,257\n"
"6,3,94~7,3,94\n"
"5,5,325~5,7,325\n"
"9,1,61~9,4,61\n"
"3,8,311~4,8,311\n"
"8,8,329~8,8,330\n"
"5,8,95~7,8,95\n"
"6,2,230~9,2,230\n"
"0,0,147~2,0,147\n"
"0,0,326~0,1,326\n"
"7,0,218~7,1,218\n"
"4,9,72~7,9,72\n"
"1,4,295~1,4,298\n"
"6,1,176~6,3,176\n"
"9,5,158~9,7,158\n"
"0,7,174~2,7,174\n"
"1,3,246~4,3,246\n"
"4,5,182~4,8,182\n"
"9,7,9~9,7,10\n"
"8,1,182~8,3,182\n"
"7,2,70~7,5,70\n"
"7,9,291~7,9,292\n"
"4,3,156~5,3,156\n"
"0,8,314~0,9,314\n"
"0,3,56~2,3,56\n"
"8,6,293~8,8,293\n"
"2,1,306~2,4,306\n"
"0,1,118~0,3,118\n"
"1,5,20~1,8,20\n"
"4,2,3~6,2,3\n"
"9,4,319~9,6,319\n"
"2,3,261~2,4,261\n"
"9,9,2~9,9,3\n"
"5,6,336~8,6,336\n"
"9,6,56~9,8,56\n"
"9,2,58~9,3,58\n"
"2,4,250~4,4,250\n"
"7,4,122~7,4,124\n"
"7,6,356~8,6,356\n"
"7,7,254~8,7,254\n"
"7,5,197~7,7,197\n"
"4,9,325~6,9,325\n"
"1,8,212~1,9,212\n"
"4,8,51~4,9,51\n"
"2,2,238~2,3,238\n"
"2,6,262~4,6,262\n"
"5,3,54~6,3,54\n"
"8,3,58~8,5,58\n"
"4,1,346~4,2,346\n"
"1,3,180~2,3,180\n"
"2,2,24~2,4,24\n"
"3,2,25~5,2,25\n"
"3,9,10~3,9,11\n"
"0,7,229~1,7,229\n"
"4,0,27~7,0,27\n"
"5,4,272~7,4,272\n"
"3,3,87~3,4,87\n"
"0,6,117~0,9,117\n"
"3,3,68~5,3,68\n"
"3,3,76~5,3,76\n"
"7,4,78~7,5,78\n"
"6,3,173~6,5,173\n"
"1,8,1~1,8,2\n"
"1,5,318~4,5,318\n"
"1,4,5~3,4,5\n"
"5,3,95~6,3,95\n"
"1,1,308~3,1,308\n"
"3,7,197~3,7,200\n"
"1,2,350~1,5,350\n"
"2,8,142~5,8,142\n"
"5,0,61~5,3,61\n"
"7,3,42~9,3,42\n"
"5,5,313~5,7,313\n"
"4,2,138~4,2,138\n"
"7,1,86~7,3,86\n"
"2,1,178~2,3,178\n"
"6,0,221~6,0,223\n"
"3,2,50~5,2,50\n"
"2,1,8~2,4,8\n"
"3,5,346~3,7,346\n"
"5,4,73~5,5,73\n"
"1,9,309~2,9,309\n"
"0,2,252~3,2,252\n"
"9,0,94~9,3,94\n"
"0,7,13~0,9,13\n"
"9,5,265~9,6,265\n"
"0,5,220~0,8,220\n"
"2,4,253~4,4,253\n"
"0,4,136~2,4,136\n"
"1,1,123~1,4,123\n"
"8,6,24~8,9,24\n"
"4,6,265~5,6,265\n"
"0,1,115~2,1,115\n"
"2,3,294~4,3,294\n"
"0,2,137~2,2,137\n"
"4,6,151~8,6,151\n"
"5,0,160~7,0,160\n"
"1,6,182~1,8,182\n"
"7,0,350~7,3,350\n"
"8,8,50~8,8,53\n"
"1,4,133~4,4,133\n"
"3,6,23~3,6,23\n"
"0,3,243~2,3,243\n"
"7,1,342~7,3,342\n"
"9,9,190~9,9,191\n"
"3,1,49~3,2,49\n"
"1,0,204~3,0,204\n"
"7,4,18~7,6,18\n"
"8,4,47~8,6,47\n"
"8,1,5~8,3,5\n"
"5,5,271~6,5,271\n"
"5,2,5~6,2,5\n"
"2,6,222~5,6,222\n"
"3,0,64~5,0,64\n"
"1,0,94~1,1,94\n"
"0,2,79~0,4,79\n"
"3,8,221~3,9,221\n"
"3,5,190~3,9,190\n"
"5,8,190~7,8,190\n"
"2,3,313~3,3,313\n"
"1,3,131~3,3,131\n"
"6,9,48~8,9,48\n"
"8,8,227~8,9,227\n"
"6,0,283~8,0,283\n"
"3,3,39~4,3,39\n"
"9,5,109~9,7,109\n"
"1,0,202~1,3,202\n"
"2,5,109~2,7,109\n"
"6,6,267~6,6,270\n"
"4,2,186~6,2,186\n"
"5,1,259~6,1,259\n"
"2,4,276~3,4,276\n"
"9,6,257~9,6,260\n"
"2,8,294~4,8,294\n"
"1,0,208~2,0,208\n"
"0,7,274~3,7,274\n"
"4,0,317~4,0,319\n"
"7,1,214~7,3,214\n"
"9,7,198~9,9,198\n"
"0,5,290~2,5,290\n"
"3,5,264~3,7,264\n"
"6,7,206~6,9,206\n"
"0,2,261~0,3,261\n"
"7,3,77~7,3,78\n"
"4,2,275~7,2,275\n"
"4,0,262~6,0,262\n"
"0,5,88~0,7,88\n"
"3,7,64~6,7,64\n"
"3,7,196~3,9,196\n"
"7,1,55~7,3,55\n"
"0,1,262~3,1,262\n"
"3,2,20~3,2,22\n"
"2,0,41~2,1,41\n"
"5,3,15~8,3,15\n"
"4,5,228~5,5,228\n"
"9,0,188~9,3,188\n"
"3,6,66~3,8,66\n"
"3,7,134~5,7,134\n"
"5,2,72~7,2,72\n"
"5,7,55~8,7,55\n"
"4,7,86~4,7,86\n"
"2,4,16~5,4,16\n"
"3,4,325~7,4,325\n"
"1,6,256~3,6,256\n"
"9,2,86~9,5,86\n"
"5,4,109~5,6,109\n"
"3,4,227~3,4,229\n"
"6,1,254~6,1,256\n"
"0,7,2~2,7,2\n"
"7,2,203~9,2,203\n"
"9,6,247~9,8,247\n"
"7,8,313~8,8,313\n"
"1,1,241~2,1,241\n"
"2,9,219~4,9,219\n"
"1,0,260~3,0,260\n"
"8,4,152~8,6,152\n"
"4,3,247~7,3,247\n"
"3,5,147~3,7,147\n"
"0,4,21~0,6,21\n"
"2,5,358~2,7,358\n"
"2,8,40~4,8,40\n"
"4,1,113~6,1,113\n"
"5,6,17~7,6,17\n"
"8,6,80~9,6,80\n"
"0,6,29~0,6,31\n"
"1,6,338~3,6,338\n"
"8,6,264~9,6,264\n"
"1,4,268~1,7,268\n"
"4,9,114~6,9,114\n"
"0,2,311~2,2,311\n"
"0,5,219~1,5,219\n"
"8,6,3~8,8,3\n"
"9,3,322~9,5,322\n"
"2,8,137~5,8,137\n"
"3,7,202~3,7,204\n"
"5,4,348~7,4,348\n"
"9,0,195~9,1,195\n"
"6,2,80~6,4,80\n"
"0,6,87~3,6,87\n"
"6,4,211~6,7,211\n"
"2,5,201~2,7,201\n"
"5,7,200~5,9,200\n"
"9,3,301~9,6,301\n"
"2,1,78~5,1,78\n"
"4,6,294~7,6,294\n"
"2,3,129~4,3,129\n"
"4,4,109~4,4,111\n"
"1,8,316~1,8,319\n"
"3,0,3~6,0,3\n"
"7,5,85~7,7,85\n"
"0,2,46~3,2,46\n"
"1,4,186~1,7,186\n"
"0,2,231~2,2,231\n"
"4,6,187~4,6,189\n"
"3,7,6~3,9,6\n"
"3,4,107~7,4,107\n"
"0,7,142~0,9,142\n"
"2,8,41~2,9,41\n"
"0,1,124~2,1,124\n"
"7,5,80~7,8,80\n"
"6,4,328~7,4,328\n"
"1,4,72~1,7,72\n"
"3,5,193~3,8,193\n"
"3,5,281~3,8,281\n"
"2,4,231~2,4,233\n"
"5,6,214~7,6,214\n"
"0,9,25~1,9,25\n"
"6,7,54~6,9,54\n"
"4,9,11~4,9,14\n"
"5,4,314~5,6,314\n"
"2,2,147~2,3,147\n"
"6,4,142~6,6,142\n"
"7,9,76~9,9,76\n"
"0,0,178~0,2,178\n"
"8,1,223~9,1,223\n"
"8,6,310~8,8,310\n"
"8,4,218~8,7,218\n"
"4,8,209~6,8,209\n"
"6,3,205~6,4,205\n"
"2,3,277~5,3,277\n"
"1,7,281~1,9,281\n"
"3,6,257~4,6,257\n"
"4,3,335~6,3,335\n"
"3,1,341~3,1,342\n"
"1,6,195~1,6,195\n"
"8,2,280~8,5,280\n"
"0,2,54~0,4,54\n"
"2,7,58~2,8,58\n"
"0,1,208~2,1,208\n"
"7,0,205~7,2,205\n"
"1,9,8~4,9,8\n"
"1,4,143~1,5,143\n"
"2,4,126~2,7,126\n"
"2,3,48~2,4,48\n"
"4,5,332~7,5,332\n"
"1,3,192~1,5,192\n"
"3,9,300~6,9,300\n"
"6,0,123~8,0,123\n"
"3,8,338~5,8,338\n"
"8,1,291~8,3,291\n"
"1,3,122~1,5,122\n"
"7,6,179~7,6,181\n"
"0,0,37~0,1,37\n"
"5,6,147~7,6,147\n"
"5,1,356~7,1,356\n"
"4,4,59~5,4,59\n"
"7,7,58~7,8,58\n"
"5,8,144~7,8,144\n"
"7,4,330~8,4,330\n"
"4,3,347~5,3,347\n"
"2,4,171~2,6,171\n"
"0,4,184~0,7,184\n"
"5,5,102~8,5,102\n"
"7,2,13~7,4,13\n"
"1,2,75~1,4,75\n"
"0,1,30~0,4,30\n"
"3,6,208~5,6,208\n"
"1,9,297~4,9,297\n"
"3,0,85~5,0,85\n"
"3,3,261~6,3,261\n"
"3,3,343~4,3,343\n"
"2,0,207~4,0,207\n"
"3,1,265~5,1,265\n"
"1,7,138~1,8,138\n"
"4,1,342~4,1,343\n"
"7,5,236~7,5,238\n"
"9,5,65~9,7,65\n"
"2,7,65~3,7,65\n"
"2,5,362~2,7,362\n"
"4,6,362~7,6,362\n"
"7,9,108~7,9,111\n"
"8,6,83~8,7,83\n"
"5,2,145~5,4,145\n"
"1,6,323~3,6,323\n"
"8,4,13~8,6,13\n"
"4,2,157~4,4,157\n"
"8,5,244~8,7,244\n"
"1,3,310~3,3,310\n"
"0,4,51~2,4,51\n"
"1,6,194~1,8,194\n"
"5,0,82~7,0,82\n"
"6,0,8~6,0,10\n"
"1,3,51~3,3,51\n"
"6,2,83~9,2,83\n"
"5,2,74~5,4,74\n"
"2,1,2~4,1,2\n"
"8,2,274~8,4,274\n"
"0,0,323~2,0,323\n"
"0,2,263~0,2,264\n"
"2,1,21~6,1,21\n"
"1,6,68~3,6,68\n"
"5,5,291~5,7,291\n"
"9,3,165~9,6,165\n"
"2,0,8~4,0,8\n"
"5,7,340~5,9,340\n"
"2,1,128~4,1,128\n"
"4,0,23~4,1,23\n"
"9,2,97~9,3,97\n"
"3,3,258~3,6,258\n"
"0,2,177~0,4,177\n"
"2,1,111~2,4,111\n"
"9,0,14~9,1,14\n"
"5,3,289~5,5,289\n"
"2,7,186~5,7,186\n"
"2,1,44~4,1,44\n"
"2,4,52~5,4,52\n"
"3,6,49~5,6,49\n"
"6,9,249~8,9,249\n"
"1,2,152~3,2,152\n"
"0,2,108~0,3,108\n"
"2,0,87~4,0,87\n"
"2,6,166~2,6,168\n"
"8,0,221~9,0,221\n"
"2,8,49~4,8,49\n"
"3,4,47~3,5,47\n"
"2,9,106~4,9,106\n"
"4,0,24~7,0,24\n"
"2,8,187~6,8,187\n"
"1,7,69~3,7,69\n"
"8,6,46~9,6,46\n"
"4,1,1~4,4,1\n"
"0,5,73~2,5,73\n"
"7,4,90~7,7,90\n"
"6,4,27~6,4,30\n"
"9,8,55~9,9,55\n"
"5,9,262~5,9,262\n"
"4,4,258~7,4,258\n"
"8,0,185~8,3,185\n"
"6,1,352~8,1,352\n"
"9,5,1~9,5,4\n"
"2,1,148~3,1,148\n"
"1,1,204~1,2,204\n"
"9,4,47~9,6,47\n"
"0,5,50~2,5,50\n"
"2,1,121~2,3,121\n"
"7,5,107~9,5,107\n"
"9,6,1~9,9,1\n"
"8,5,31~8,8,31\n"
"7,2,87~7,2,87\n"
"6,7,202~6,7,205\n"
"9,1,56~9,3,56\n"
"3,1,298~5,1,298\n"
"3,2,270~3,5,270\n"
"2,5,220~4,5,220\n"
"1,6,130~1,8,130\n"
"5,6,197~5,6,200\n"
"4,6,50~4,8,50\n"
"8,1,109~8,2,109\n"
"5,0,116~7,0,116\n"
"5,7,104~5,9,104\n"
"3,4,205~3,6,205\n"
"4,7,128~4,7,128\n"
"0,8,22~2,8,22\n"
"5,4,264~5,5,264\n"
"5,6,150~7,6,150\n"
"5,1,315~5,4,315\n"
"7,4,1~9,4,1\n"
"3,1,351~3,3,351\n"
"5,6,36~8,6,36\n"
"2,0,145~2,2,145\n"
"7,2,249~7,4,249\n"
"2,4,130~2,6,130\n"
"5,8,151~5,8,153\n"
"3,4,289~3,6,289\n"
"7,6,292~7,8,292\n"
"5,6,10~7,6,10\n"
"3,1,183~3,4,183\n"
"9,4,297~9,6,297\n"
"9,0,13~9,1,13\n"
"1,6,112~3,6,112\n"
"0,4,3~0,6,3\n"
"6,6,301~8,6,301\n"
"2,2,304~2,5,304\n"
"0,6,18~3,6,18\n"
"0,3,348~3,3,348\n"
"6,0,163~8,0,163\n"
"3,0,348~5,0,348\n"
"6,8,210~8,8,210\n"
"2,1,112~4,1,112\n"
"2,2,225~6,2,225\n"
"3,1,268~5,1,268\n"
"3,4,293~3,7,293\n"
"8,2,85~8,2,87\n"
"6,7,305~8,7,305\n"
"0,4,351~2,4,351\n"
"5,4,340~5,4,342\n"
"4,3,355~4,6,355\n"
"2,9,42~4,9,42\n"
"5,6,181~6,6,181\n"
"2,1,31~2,2,31\n"
"9,0,190~9,3,190\n"
"7,3,272~9,3,272\n"
"5,0,197~5,2,197\n"
"7,5,202~7,8,202\n"
"6,5,351~6,8,351\n"
"7,7,251~7,9,251\n"
"1,3,125~1,3,128\n"
"3,7,82~7,7,82\n"
"9,1,181~9,3,181\n"
"8,4,33~8,7,33\n"
"2,5,162~4,5,162\n"
"6,0,349~6,2,349\n"
"5,0,217~5,1,217\n"
"2,2,223~2,5,223\n"
"2,2,14~2,3,14\n"
"8,6,306~8,6,306\n"
"6,4,276~9,4,276\n"
"4,5,230~6,5,230\n"
"2,2,105~2,2,109\n"
"0,7,325~3,7,325\n"
"7,4,125~7,4,127\n"
"5,1,351~5,3,351\n"
"5,5,297~5,7,297\n"
"6,2,74~6,4,74\n"
"2,0,317~2,2,317\n"
"2,2,296~2,4,296\n"
"7,1,285~8,1,285\n"
"5,0,26~5,2,26\n"
"0,6,163~3,6,163\n"
"4,4,21~4,6,21\n"
"2,5,131~2,5,132\n"
"2,9,193~2,9,195\n"
"6,9,239~8,9,239\n"
"6,0,317~6,2,317\n"
"1,1,99~1,1,100\n"
"9,2,90~9,5,90\n"
"3,4,274~4,4,274\n"
"9,5,246~9,7,246\n"
"4,6,332~6,6,332\n"
"6,5,326~6,5,328\n"
"1,5,189~1,5,191\n"
"3,5,62~3,7,62\n"
"5,5,170~8,5,170\n"
"3,6,16~5,6,16\n"
"2,9,303~6,9,303\n"
"9,4,262~9,4,264\n"
"6,3,333~8,3,333\n"
"5,8,323~5,9,323\n"
"5,4,181~5,5,181\n"
"0,3,187~0,5,187\n"
"3,0,70~3,0,72\n"
"3,2,250~3,3,250\n"
"6,8,207~7,8,207\n"
"6,4,7~6,7,7\n"
"4,6,312~4,6,315\n"
"4,6,125~4,8,125\n"
"6,8,285~6,9,285\n"
"5,1,101~5,2,101\n"
"9,3,182~9,6,182\n"
"3,3,175~3,5,175\n"
"0,7,179~2,7,179\n"
"1,8,127~3,8,127\n"
"5,8,148~6,8,148\n"
"5,0,158~5,4,158\n"
"2,6,114~2,6,114\n"
"6,4,250~6,7,250\n"
"6,7,137~7,7,137\n"
"3,1,195~5,1,195\n"
"2,1,154~2,3,154\n"
"8,5,297~8,7,297\n"
"1,6,226~1,7,226\n"
"1,0,312~1,3,312\n"
"6,5,74~6,5,75\n"
"3,3,116~5,3,116\n"
"3,1,339~5,1,339\n"
"9,7,90~9,7,91\n"
"7,2,113~8,2,113\n"
"1,4,258~1,6,258\n"
"3,5,272~3,8,272\n"
"5,8,140~6,8,140\n"
"0,1,209~3,1,209\n"
"6,7,108~9,7,108\n"
"4,0,67~7,0,67\n"
"3,2,180~3,5,180\n"
"0,2,83~0,4,83\n"
"3,5,46~3,7,46\n"
"1,4,103~1,6,103\n"
"1,5,121~1,8,121\n"
"7,0,340~7,3,340\n"
"0,2,260~0,5,260\n"
"9,5,68~9,5,70\n"
"0,0,313~0,2,313\n"
"8,0,20~9,0,20\n"
"5,6,192~5,9,192\n"
"2,6,189~2,8,189\n"
"0,7,7~0,7,9\n"
"2,5,8~2,6,8\n"
"6,6,361~8,6,361\n"
"4,1,82~6,1,82\n"
"7,2,295~9,2,295\n"
"4,7,281~4,9,281\n"
"0,2,11~2,2,11\n"
"5,3,337~5,5,337\n"
"5,1,338~5,3,338\n"
"1,2,53~3,2,53\n"
"8,3,106~8,5,106\n"
"8,4,79~8,8,79\n"
"3,7,144~3,9,144\n"
"4,2,253~6,2,253\n"
"0,4,32~0,5,32\n"
"3,3,345~3,6,345\n"
"1,4,176~1,7,176\n"
"4,5,274~6,5,274\n"
"0,5,52~2,5,52\n"
"5,0,8~5,0,9\n"
"1,1,93~1,3,93\n"
"1,7,113~1,9,113\n"
"0,3,153~2,3,153\n"
"3,5,21~3,6,21\n"
"0,0,3~2,0,3\n"
"2,1,200~2,1,202\n"
"9,3,110~9,5,110\n"
"6,3,182~6,5,182\n"
"6,6,200~6,8,200\n"
"1,6,213~1,7,213\n"
"0,5,297~0,8,297\n"
"4,4,345~5,4,345\n"
"0,7,136~2,7,136\n"
"2,9,306~4,9,306\n"
"2,9,46~5,9,46\n"
"0,0,155~2,0,155\n"
"0,7,193~2,7,193\n"
"4,5,234~7,5,234\n"
"0,2,310~0,4,310\n"
"7,2,145~9,2,145\n"
"6,2,242~6,5,242\n"
"2,0,4~4,0,4\n"
"6,7,193~6,8,193\n"
"3,9,9~6,9,9\n"
"6,5,174~6,6,174\n"
"4,1,129~4,1,132\n"
"8,8,81~9,8,81\n"
"7,5,195~7,8,195\n"
"6,6,257~6,8,257\n"
"6,1,181~6,3,181\n"
"9,0,325~9,3,325\n"
"5,9,101~6,9,101\n"
"4,7,188~6,7,188\n"
"4,3,136~5,3,136\n"
"8,5,173~8,7,173\n"
"3,7,96~6,7,96\n"
"1,2,41~2,2,41\n"
"0,3,9~0,5,9\n"
"1,5,27~1,7,27\n"
"3,1,71~3,4,71\n"
"2,0,315~5,0,315\n"
"2,2,197~2,5,197\n"
"5,5,88~6,5,88\n"
"2,8,36~2,9,36\n"
"4,6,127~7,6,127\n"
"3,8,262~3,9,262\n"
"7,0,115~9,0,115\n"
"3,5,286~3,5,288\n"
"2,5,194~2,8,194\n"
"6,4,304~6,7,304\n"
"6,1,77~6,4,77\n"
"7,7,223~8,7,223\n"
"8,4,81~8,4,84\n"
"0,6,199~0,9,199\n"
"1,5,119~1,8,119\n"
"8,1,218~8,1,220\n"
"6,8,45~6,9,45\n"
"4,3,132~4,3,134\n"
"1,3,177~3,3,177\n"
"1,4,261~1,4,262\n"
"4,4,46~6,4,46\n"
"3,6,267~3,6,269\n"
"7,7,88~9,7,88\n"
"5,6,269~5,7,269\n"
"3,4,14~3,6,14\n"
"5,4,19~5,5,19\n"
"1,5,359~4,5,359\n"
"4,5,352~5,5,352\n"
"1,4,338~3,4,338\n"
"4,3,75~6,3,75\n"
"0,7,42~1,7,42\n"
"5,7,176~7,7,176\n"
"8,6,105~8,8,105\n"
"4,5,110~5,5,110\n"
"5,0,199~5,0,202\n"
"6,1,18~6,3,18\n"
"8,5,314~8,7,314\n"
"1,6,133~1,8,133\n"
"1,3,150~4,3,150\n"
"7,6,140~7,8,140\n"
"6,3,330~6,5,330\n"
"2,2,228~2,4,228\n"
"8,9,51~8,9,53\n"
"5,1,215~8,1,215\n"
"3,5,194~5,5,194\n"
"1,8,340~3,8,340\n"
"6,5,73~8,5,73\n"
"9,7,193~9,7,196\n"
"3,4,159~3,6,159\n"
"4,7,213~4,7,215\n"
"6,0,261~6,2,261\n"

;

using Coord = unsigned long;

struct Point {
    Coord x;
    Coord y;
};
bool operator==(const Point& p1, const Point& p2)
{
    return (p1.x == p2.x) && (p1.y == p2.y);
}
bool operator<(const Point& p1, const Point& p2)
{
    if (p1.y != p2.y) {
        return (p1.y < p2.y);
    }
    return (p1.x < p2.x);
}
bool operator!=(const Point& p1, const Point& p2)
{
    return !(p1 == p2);
}
std::string pointToStr(Point p)
{
    using std::literals::string_literals::operator""s;
    return "("s + std::to_string(p.x) + ", " + std::to_string(p.y) + ')';
}

struct Point3 {
    Coord x;
    Coord y;
    Coord z;
};
/*bool operator==(const Point3& p1, const Point3& p2)
{
    return (p1.x == p2.x) && (p1.y == p2.y) && (p1.z == p2.z);
}
bool operator!=(const Point3& p1, const Point3& p2)
{
    return !(p1 == p2);
}*/

bool operator<(const Point3& p1, const Point3& p2)
{
    if (p1.z != p2.z) {
        return (p1.z < p2.z);
    }
    if (p1.y != p2.y) {
        return (p1.y < p2.y);
    }
    return (p1.x < p2.x);
}
std::string point3ToStr(Point3 p)
{
    using std::literals::string_literals::operator""s;
    return "("s + std::to_string(p.x) + ", " + std::to_string(p.y) + ", " + std::to_string(p.z)
        + ')';
}

bool toUnsigned(const std::string& s, unsigned long& res)
{
    try {
        if (s.empty()) {
            return false;
        }
        if (!std::all_of(std::next(s.cbegin()), s.cend(), [](const char ch) {
                return std::isdigit(ch); // avoid first, with '-' in order to allow '-0'.
            })) {
            // stoul would ignore tailing non-digits.
            // Here ignore first char, that is, allowing '-' (specific check later for future use).
            return false;
        }
        res = std::stoul(s);
        // Note also that stoul would have converted into unsigned a value starting with minus
        // ('-').

        if (s.find('-') != std::string::npos) {
            // stoul converts negative values with a reinterpret cast.
            if (s.substr(0U, 2U) != "-0") {
                return false;
            }
        }

        return errno != ERANGE;
    } catch (...) {
        // std::invalid_argument, eventually std::out_of_range
        return false;
    }
}

void trim(std::string& s)
{
    // accept tailing spaces.
    while ((!s.empty()) && (s.back() == ' ')) {
        s.resize(s.size() - 1U);
    }

    size_t pos = s.find_first_not_of(' ');
    if ((pos > 0U) && (pos != std::string::npos)) {
        s = s.substr(pos, s.size());
    }
}

} // namespace

auto day22Part1(std::string_view streamSource, bool sourceIsFilePath)
{
    std::shared_ptr<std::istream> inputStream;

    if (sourceIsFilePath) {
        inputStream = std::static_pointer_cast<std::istream>(
            std::make_shared<std::ifstream>(std::string(streamSource)));
    } else {
        auto sstream = std::make_shared<std::stringstream>();
        (*sstream) << streamSource;
        // use std::move(sstream) in C++20 or more.
        inputStream = std::static_pointer_cast<std::istream>(sstream);
    }

    // std::vector<std::string> lines;

    using Brick = std::array<Point3, 2U>; // assumed pre-sorted
    using Bricks = std::set<Brick>;
    Bricks bricks; // need ordered, by increasing z.

    std::map<Point, Bricks> bricksPerXY; // TODO: maybe enough min and max z, not the full
                                            // brick.
    Bricks bricksBelowOthersAsSingle;

    using Count = unsigned long;

    Count res = 0U;

    unsigned lineCount{0U};
    constexpr auto MaxLineLength = 1000;
    std::array<char, MaxLineLength + 1> cc{};
    while (inputStream->getline(cc.data(), MaxLineLength, '\n')) {
        ++lineCount;
        std::string errorLine = "Input error at the line n. "
            + std::to_string(static_cast<int>(lineCount)) + " : ";

        auto c = static_cast<size_t>(inputStream->gcount());
        // 'c' includes the delimiter, which is replaced by '\0'.
        if (c > MaxLineLength) {
            throw std::invalid_argument(
                errorLine + "longer than " + std::to_string(MaxLineLength));
        }

        std::string line;
        // std::cout << "length = " << c << '\n';
        if (cc.at(c - 1U) == '\0') { // 'c' is positive as line has been extracted.
            --c; // excludes '\0' that replaced the delimiter '\n'.
        }
        line = std::string_view(cc.data(), c);
        // std::cout << "line: " << line << '\n';

        trim(line);

        if (line.empty()) {
            std::cout << "WARNING: unexpected empty line\n";
            continue;
        }

        auto tildePos = line.find('~');
        if (tildePos == std::string::npos) {
            throw std::invalid_argument(errorLine + " brick without proper characted ~");
        }
        std::string::size_type startPos = 0U;

        Brick brick;

        for (Brick::size_type i = 0; i < 2; ++i) {
            auto commaPos = line.find(',', startPos);
            std::array<Coord, 3U> coords{0U, 0U, 0U};
            for (std::array<Coord, 3U>::size_type j = 0; j < 3; ++j) {
                if (commaPos == std::string::npos) {
                    throw std::invalid_argument(
                        errorLine + " brick without proper comma between coordinates");
                }

                unsigned long coord{};
                if (!toUnsigned(line.substr(startPos, commaPos - startPos), coord)) {
                    throw std::invalid_argument(
                        errorLine + " brick with non-postive numeric coordinate");
                }
                if ((j == 2) && (coord == 0U)){
                    throw std::invalid_argument(errorLine + " brick with z-coordinate zero");
                }
                coords.at(j) = coord;

                startPos = commaPos + 1;
                commaPos = (j == 0) ? line.find(',', startPos) : tildePos;
            }

            brick.at(i) = Point3{coords.at(0U), coords.at(1U), coords.at(2U)};

            startPos = tildePos + 1;
            tildePos = line.size();
        }

        if (brick.at(1) < brick.at(0)) {
            std::swap(brick.at(0), brick.at(1));
        }

        {
            const auto diffX = (brick.at(0).x != brick.at(1).x) ? 1U : 0U;
            const auto diffY = (brick.at(0).y != brick.at(1).y) ? 1U : 0U;
            const auto diffZ = (brick.at(0).z != brick.at(1).z) ? 1U : 0U;

            if (diffX + diffY + diffZ > 1U) {
                throw std::invalid_argument(errorLine + " brick not aligned along an axis");
            }
        }

        // const auto itB = bricks.insert(brick).first;

        Point scrollBrick{brick.at(0).x, brick.at(0).y};

        bool diffX = (brick.at(0).x != brick.at(1).x);
        (diffX ? scrollBrick.x
                : scrollBrick.y)--; // no problems for overflow, even if it happens.
        do {
            (diffX ? scrollBrick.x : scrollBrick.y)++;

            // bricksItPerXY.emplace(scrollBrick,BrickItSet(compBrickIt)).first->second.insert(itB);

            bricksPerXY[scrollBrick].insert(brick);
        } while (Point{scrollBrick.x, scrollBrick.y} != Point{brick.at(1).x, brick.at(1).y});
        // comparing only x and y makes it working also for vertical bricks.

        bricks.insert(brick);

        // std::stringstream lineStream;
        // lineStream << line;

        // lines.push_back(std::move(line));
    }

    using DiffX = bool;
    using BrickCoordXY = std::pair<Point, DiffX>;

    static const auto brickFirstXY = [](const Brick& brick) {
        const auto diffX = (brick.at(0).x != brick.at(1).x);
        return BrickCoordXY{Point{brick.at(0).x, brick.at(0).y}, diffX};
    };
    // use Last isntead of End, to manage even vertical bricks in the same code.
    static const auto brickLastXY = [](const Brick& brick) {
        const auto diffX = (brick.at(0).x != brick.at(1).x);
        return BrickCoordXY{Point{brick.at(1).x, brick.at(1).y}, diffX};
    };
    static const auto brickMoveNextXY = [](BrickCoordXY& brickCoordXY) {
        (brickCoordXY.second ? brickCoordXY.first.x : brickCoordXY.first.y)++;
    };

    // bricks are naturally sorted by incrasing 'z', based on the Point3 compare operator.
    for (auto itB = bricks.begin(); itB != bricks.end();) {
        const auto& brick = *itB;
        Coord z = brick.at(0).z; // '0' is the lowest in any case

        Coord maxZ = 0U;
        // BrickItSet bricksBelow;
        Bricks bricksBelow;

        if (z > 1U) { // speed-up
            const Point3 samplePoint = Point3{0U, 0U, z};

            auto scrollBrickXY = brickFirstXY(brick);
            const auto lastScrollBrick = brickLastXY(brick);
            while (true) {
                auto& vertBrickSet = bricksPerXY[scrollBrickXY.first];

                const Brick sampleBrick{samplePoint, samplePoint};

                auto itBXY = vertBrickSet.lower_bound(sampleBrick);
                if (itBXY != vertBrickSet.begin()) {
                    --itBXY;
                    // There is a base, update maxZ but without ending the cycle.

                    // const auto itBbelow = *itItB;
                    // const auto& brickBelow = *itBbelow;
                    const auto& brickBelow = *itBXY;

                    bool isBrickBelow = false;

                    // '1' is the higher for any brick.
                    if (brickBelow.at(1).z > maxZ) {
                        maxZ = brickBelow.at(1).z;
                        // only the new one is at highest z.
                        bricksBelow.clear();
                        isBrickBelow = true;
                    } else if (brickBelow.at(1).z == maxZ) {
                        isBrickBelow = true;
                    } // else: brickBelow.z < maxZ, another brick-below
                        // is higher than this one.

                    if (isBrickBelow) {
                        // bricksBelow.insert(itBbelow);
                        bricksBelow.insert(brickBelow);
                    }
                }

                // comparing only x and y makes it working also for vertical bricks.
                if (scrollBrickXY == lastScrollBrick) {
                    break;
                }
                brickMoveNextXY(scrollBrickXY);
            }

            if (bricksBelow.size() == 1U) {
                const auto& brickBelow = *bricksBelow.cbegin();
                bricksBelowOthersAsSingle.insert(brickBelow);
            }
        }

        // bricksBelow is the set of the ones below (after moving if maxZ+1U < z).
        const auto itBnext = std::next(itB);
        if (maxZ + 1U < z) {
            // may fall down above maxZ, staying on the bricks of bricksBelow.
            const Coord oldZ = z;
            const Coord newZ = maxZ + 1U;

            Brick newBrick = brick;

            // the brick has to be removed from bricks and reinserted.
            // bricks.erase(itB); -> later, keep brick for the work of removing from
            // bricksPerXY.

            newBrick.at(0).z = newZ;
            newBrick.at(1).z -= (oldZ - newZ);
            bricks.insert(newBrick);

            // even the data in bricksPerXY has to be modified.
            auto scrollBrickXY = brickFirstXY(brick);
            const auto lastScrollBrick = brickLastXY(brick);
            while (true) {
                auto& vertBrickSet = bricksPerXY[scrollBrickXY.first];

                vertBrickSet.erase(brick);
                vertBrickSet.insert(newBrick);

                // comparing only x and y makes it working also for vertical bricks.
                if (scrollBrickXY == lastScrollBrick) {
                    break;
                }
                brickMoveNextXY(scrollBrickXY);
            }

            bricks.erase(itB);
        }

        itB = itBnext;
    }

    std::cout << "Bricks below as single of others : n. " << bricksBelowOthersAsSingle.size()
                << std::endl;
    res = bricks.size() - bricksBelowOthersAsSingle.size();

    std::cout << "Lines count " << lineCount << std::endl;
    std::cout << "Brick count " << bricks.size() << std::endl;
    std::cout << "\nResult: " << res << std::endl;
    // std::cout << "Total tiles passed on or reached " << points.size() << std::endl;
    // std::cout << "Total tiles reachable exactly " << points.size() << std::endl;
    return res;
}

int main()
{
    try {
        day22Part1(Input, false);
        // day22Part1("./22_input_file.txt",true);
    } catch (std::invalid_argument& ex) {
        std::cout << std::endl; // in order to flash
        std::cerr << "Bad input: " << ex.what() << std::endl;
        return 1;
    } catch (std::exception& ex) {
        std::cout << std::endl; // in order to flash
        std::cerr << "Error: " << ex.what() << std::endl;
        return 1;
    } catch (...) {
        std::cout << std::endl; // in order to flash
        std::cerr << "Unknown error: " << std::endl;
        return 1;
    }

    return 0;
}


/*
OUTPUT:

Example:
Bricks below as single of others : n. 2
Lines count 7
Brick count 7
Result: 5

Real input:
Bricks below as single of others : n. 957
Lines count 1456
Brick count 1456
Result: 499
*/
