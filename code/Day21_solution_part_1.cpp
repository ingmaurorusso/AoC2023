#include <algorithm>
#include <array>
#include <exception>
#include <fstream>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <string_view>
#include <unordered_set>
#include <vector>

namespace{

constexpr std::string_view Input =
false ?

"...........\n"
".....###.#.\n"
".###.##..#.\n"
"..#.#...#..\n"
"....#.#....\n"
".##..S####.\n"
".##..#...#.\n"
".......##..\n"
".##.#.####.\n"
".##..##.##.\n"
"...........\n"

:

"...................................................................................................................................\n"
"................#.##....#......#.........#.....#.........................#......................#....#................#............\n"
"....#....#..#....#..#..##.#.............#.....#...##......................#............................##.......#........#.........\n"
".#......................................#........#.....#..............................................#...................#..#.....\n"
"...###.#.....#...................#..........................................#..##.......#..#...................#...................\n"
".....................#.#...........##.....#........#...#......................###...........................#......................\n"
"...............#..................#...........#....#...............................#.....#...............................#.........\n"
"......#..........#.##....#.......#.#....................................................................###......#....#............\n"
"...........#....#..............#....................#....................................#......#.......#..........#.........#...#.\n"
"....##.........##..#.........#...............#....................#...............#.....#.##.....#............#.....#.#............\n"
"...#..#..........#............#.....#....#...##...#....................#.............#.....#.....#...#...................#.........\n"
"....#.............#.....#...#...#...........##.................#..................#.#...........#...........##.........#...........\n"
"......#............................#..........................................................#...#......#..#...........#..........\n"
"...........................#...........#.............................................#.....#..#...........#......................#.\n"
".#..#...#..##.##............#...##..............................#....................#................#.............#....#.........\n"
"......................#...........#....................#..............................#..................#.......#.................\n"
"...........#.......#................#.....#.#.............#.#......#.................................##..#......................#..\n"
"...............#......#....................#...........#..................................#.....#..#............#.......#.#....#...\n"
"..#...........#.#.......................................#...#........#..#................#..............#..#.#.......#........#....\n"
"......................#...#..........................................................................#........#....................\n"
".............#.............##...#...........................#..#....#.....................#..#.......#...........#.................\n"
".#....................#......#.....#....#.......#.............#...##..............#........#.#....#..#..............#......#..#....\n"
"....#.......#...............##.................#.................................................#........#....#....#..............\n"
".#.............#....#..........................#................................................#.............#.##.................\n"
"..#........................#...........................................#............#........#.........#..#.................#......\n"
"......................#.............#...............#.........#........##......#.#.......................#.........#...#...........\n"
"..#...........#..............#..............#...........#......#.........#...#.....#.......................#...#.#.................\n"
"...##..#.........#...............#....................#..#..#..#.....#..............#...#..............#.#...#......#.#............\n"
".......................#.............................#....#...#............#..#...................................#..............#.\n"
".#...#.##..........#..##.#.......................#........#.....#...................................#.#...........#....#..##....#..\n"
"..............#.#....#.......#...........#.........#......#....................#......##............#..............................\n"
"..............#..........#............#..........#.....#....#.............................#.#.......#.....#.....#..........#.......\n"
"..#.....#....#..........#.....................##..#....##..#..##......#....................................#..................#....\n"
"...................#..#...............##...............#.#....#..................##.......................#........#...........#...\n"
"....#...#..................#................................#......#...#.....#...........#................................#........\n"
"....................................#...........#..#......##.......#..#.................#..#.......................................\n"
"............#....#....#............#.#.................#........................#...............#............#..............#......\n"
"................................#............#..................#.##.....#.....................#............###...........#...#.#..\n"
".............#.........#.........#.................#..................##....#..........#..#..............................#.#.......\n"
"..........................................#................#........#..........#............#...........................#....##..#.\n"
".#...#...#.....##...........................#.............#..............................#..#.................#..#....#.........##.\n"
"............#...............#.....#..#.....#.................#........#..#.......#........#...##.#...............#.......#..#...#..\n"
"..#.#.#.........#..........#............#..##....#......###........#.#......#....#..#.....#.......#........................#.......\n"
".............#....................#.#.#.............#...#.#.....#..#....#.#...#....#....#.......#.#....................#...#.......\n"
"......##..................#............#....................#...................#....#.........#.#.........................#..#....\n"
"............#.##.........#...............#...........................#..............#.#............................#...............\n"
"........#....#...............#.....#..#......#...##....#............#.....#.........##.....................#..................#....\n"
".................................##....#..#.#.......#........#.................#.#.........................#...........#.#.#.......\n"
"........................#....#............................#..#.....#.....#.#...........................................#...........\n"
".#.......#...........#....#......................#.........#......#...#...#.......#.#..........##.....#................#...........\n"
"......#...........................#......#.#.......#.......#.#........................#..................#..............#..........\n"
"........#.........#........#..#...................#...#...#...#......#.#................##.#......#.......#...............#..#..##.\n"
".......#........................#..........##.........#...##..............#.....#.....#............................................\n"
".......#................#....##.......................#..#..................#....................#.............#.............#.....\n"
"............................#...#...#........##........##..........#.......#..............#......................................#.\n"
"......#............................................#.........#......#....................#.....#.##.#.............#................\n"
"...............#...........##......#..........................#...........#..............................#.#....#.#..........#..#..\n"
"........................##..................................................#.......................#........#.....#...............\n"
"....................#..............#..............#.............#.......#..........................#.............#.................\n"
".................#..#.#.#......#.........#.....#...........#.......#..........#...........#........................................\n"
".................................................#.............................................#..........#....#..##...#.........#.\n"
"...................#....#.................#.......#...#............#....................#.............#...............#............\n"
".........#....#......#......#...#...#.......#.......#..#.............#....#.....#..............#....#...................#..........\n"
".........#..#..............................#....#.......#.......#....#.....#...#...#...#...........#.....##...............#........\n"
".....#..................#....#........#............##.#....#..............#...#.#.....#...........#.#......#....#..................\n"
".................................................................S.................................................................\n"
".......#...........#.#.........#...#........#.#......#.......##.#......##...........................#...#.....#.........#..........\n"
"..................................................#............................#..........#................###......##..#..........\n"
"........#....#.......................#.##...#......#...........#..............#......#............#................................\n"
".........................#...........................#.................#....#..#................#....................#.............\n"
"...................#..................#.........................#........##....#.................##..#..#.......##.....#...........\n"
"...............................#..#........#.#........#..............#............#..##...#.#.......#..............................\n"
"...............#.............#...#.....#.........#..##............................#..............#.#........#..#...#...............\n"
"..#.........#................#.......##...............#...............#........#......#.......#...........##...#.#..#...........#..\n"
".............#............#....##..#.#......##...##..#................................#..#.....##....#........................#....\n"
"..............#.....#...#.....#...................#.......##.#.......#..#..............................#.....#.....................\n"
"........................#......#...#......#.....#...........#.#...#...................#........#..........#..#.....................\n"
"...................#..................#.......#......................................##......#...#..#........##....................\n"
".....................#......................#.........#.#.#.............#.....#...........#...#..........#.........................\n"
".........................#.#...#..........#....##.............................#........#......#...#.........#......................\n"
".#......#.#...............#.#.#.#.............#...#...#...............##..#...........#...#..........#.#.#...#...................#.\n"
"........#.###...........#..#..........##.....#.#.........#.#..#..............#..............#..........................#.....#.....\n"
"......#........................................#......#.........#...#..............................#.....................#.....##..\n"
"....#...#.....................#....#..........#.........................#....#.#..........#..#...#..................#.......#......\n"
"...#......#..............#.....................#..........................#...........#.....#....#...#.............................\n"
"........#.......#.........#................#...........#......##......................................#...................#.##.....\n"
"..#..#..#...................#..................#.........#...#......#............#..#.#.#.........#..#.............................\n"
".........##..##...........................#.........#.....................#.......#.#...#...#.......#................#.#...........\n"
".....#.......#..............#...#..................#.................................#..#..#......#...#..............#........#....\n"
"............................#.............#.................................#..#..#...#................................#..#........\n"
"........#.#....#.............#.#............#..............##.......###............................#..........#..........#.........\n"
".......#...#....................#....#.#....#...#.#.#...##.........................#..........................................#....\n"
"..#......................................................###.........................#...............................#.##..........\n"
"......#........#...#..............#......#...............#...##.#...#.........#.........#.........#...................##...........\n"
".........#.....#..................#............#.....#........#........#..................#.#.............#........#....#..........\n"
"...##...............#...#...........#..##...........#...#.#................##.......#....#.#....#...........#........#.#...........\n"
"......#.............#...................##..#................#................#..........#...#..........#.......#...........#......\n"
".......#................................................#..............#..........#.#......#..#........#....#....#.#...#...........\n"
"....#.....#.........#...#....#.........................#..#.............##.....#.#...............................#.#.....#.........\n"
".......................................#.....##.....#...#.#......................#..#................................#...........#.\n"
"......#..........##.#..........................................#.......##..#.........##........................#................#..\n"
"..............#.......#........................#.......#.#......#...............#.#.................#.............#..#.............\n"
"....................................................#...........#.....#......#.#.#................##....#...#.#.#.........#........\n"
"........#..................#.................................##.....................#...#............##.....#.#.........#...#...#..\n"
".....#....#.#...#......#......#.........................#.#...............#..#.......................#...........#..##.........#.#.\n"
"..........#.................................#.....................#...#.#......#.....##...........#..............#.................\n"
"..##..##.....................#..................#.#......#.#.......#....#.#..........................#.#...#.........#...#.........\n"
"...................#.......#...#.....................................#...#........#....................#.............#.......#.....\n"
"............#..#..#...................................#......#..................#..........#..........##....................#......\n"
"...........##.........#...#.#.....#....#............##...#.............................................#..#.....#..........#.......\n"
"......#....#..............#.......#..................#...##...#.#.......#..........................#...#..............##...........\n"
"............#..##....#...........#..#....##...........#........................................#.....#..#..#........#..............\n"
"....................#.....#.#....#.........#.........#.......................................................#.........#....#......\n"
".........#...#...................#........................#..................#................#............#.#.....................\n"
".......................#.......#..........................#..#........................#.........#..................#....#..........\n"
"...#.#.................................#..#...................#......#.....#.......................#......#.......#.........#......\n"
"...#............#.....#...#.....#.....#.#................#....#....#.#...#................#...............#...............#....#...\n"
"...............................#.........................####.#...#...#...............................#.........................##.\n"
".....#.................#..#..##.....#...#....................##....................#.#........#................#.#...........#.....\n"
".#.............#..#.........#.###.#...........#............#....................#........................#......#....###..#........\n"
"......#.......#..#.........#......................##..............................#...................#.......#......#....#........\n"
"....#.....#.......................#.........#.....................#................#..............#....................#......#....\n"
"......#............#...#...#....#.#.................#...............#...................#..........#.............#..#.#............\n"
"......................#............................#...................................#.#.#...#.#...#........#..........#....#..#.\n"
"......#......................#..............#.......#........................#.............##.#.#..................................\n"
"..................................#............##..........................#......#......#..#...............#......................\n"
"......#.........#..##.#...##......#............#..........................#.......#........#....##...#...#.........................\n"
".#....................#.........#.........#.................................##...............##...........#............#...#.......\n"
"..#..................#.....#.......#..#.........#.....#..###..................#.......#....#.............##.#..#...................\n"
".#.....#...#.#.............#.....#.....#..#.....#.........#...........#...#......#............#..#.#.......#......#................\n"
"...................................................................................................................................\n"

;

using Coord = size_t;

struct Point {
    Coord x;
    Coord y;
};
/*bool operator==(const Point& p1, const Point& p2)
{
    return (p1.x == p2.x) && (p1.y == p2.y);
}*/

bool operator<(const Point& p1, const Point& p2)
{
    if (p1.y != p2.y) {
        return (p1.y < p2.y);
    }
    return (p1.x < p2.x);
}
/*bool operator!=(const Point& p1, const Point& p2)
{
    return !(p1 == p2);
}
std::string pointToStr(Point p)
{
    using std::literals::string_literals::operator""s;
    return "("s + std::to_string(p.x) + ", " + std::to_string(p.y) + ')';
}*/

enum class Direction : unsigned { Right, Down, Left, Up };

constexpr auto FourDir = 4U;

template<typename E>
constexpr auto toUnderlying(const E e) noexcept
{
    return static_cast<std::underlying_type_t<E>>(e);
}

} // namespace

auto day21Part1(std::string_view streamSource, bool sourceIsFilePath)
{
    std::shared_ptr<std::istream> inputStream;

    if (sourceIsFilePath) {
        inputStream = std::static_pointer_cast<std::istream>(
            std::make_shared<std::ifstream>(std::string(streamSource)));
    } else {
        auto sstream = std::make_shared<std::stringstream>();
        (*sstream) << streamSource;
        // use std::move(sstream) in C++20 or more.
        inputStream = std::static_pointer_cast<std::istream>(sstream);
    }

    std::vector<std::string> lines;
    Coord rowsLength{};

    using Dir = Direction;

    using PosCount = unsigned long;

    PosCount rocksInBasicField = 0U;

    bool startFound = false;
    Point startP{};

    unsigned lineCount{0U};
    constexpr auto MaxLineLength = 1000;
    std::array<char, MaxLineLength + 1> cc{};
    while (inputStream->getline(cc.data(), MaxLineLength, '\n')) {
        ++lineCount;
        std::string errorLine = "Input error at the line n. "
            + std::to_string(static_cast<int>(lineCount)) + " : ";

        auto c = static_cast<size_t>(inputStream->gcount());
        // 'c' includes the delimiter, which is replaced by '\0'.
        if (c > MaxLineLength) {
            throw std::invalid_argument(
                errorLine + "longer than " + std::to_string(MaxLineLength));
        }

        std::string line;
        // std::cout << "length = " << c << '\n';
        if (cc.at(c - 1U) == '\0') { // 'c' is positive as line has been extracted.
            --c; // excludes '\0' that replaced the delimiter '\n'.
        }
        line = std::string_view(cc.data(), c);
        // std::cout << "line: " << line << '\n';

        // std::stringstream lineStream;
        // lineStream << line;

        if (line.empty()) {
            std::cout << "WARNING: empty line\n";
            continue;
        }

        if (lines.empty()) {
            rowsLength = line.size();
        } else if (rowsLength != line.size()) {
            throw std::invalid_argument(errorLine + "line length different from previous ones");
        }

        if (!std::all_of(line.cbegin(), line.cend(), [](const char ch) {
                return (ch == '#') || (ch == '.') || (ch == 'S');
            })) {
            throw std::invalid_argument(errorLine + "some non-digit character");
        }

        const auto posS = line.find('S');
        if (posS != std::string::npos) {
            if (startFound) {
                throw std::invalid_argument(errorLine + "repeated start");
            }
            startFound = true;
            startP = Point{posS, lineCount - 1U};

            if (line.find('S', posS + 1U) != std::string::npos) {
                throw std::invalid_argument("two starts in the same line");
            }
        }

        rocksInBasicField += static_cast<PosCount>(
            std::count_if(line.cbegin(), line.cend(), [](const char ch) { return ch == '#'; }));

        lines.push_back(std::move(line));
    }

    if (!startFound) {
        throw std::invalid_argument("no start point!");
    }

    // PosCount nonRocksInBasicField = static_cast<size_t>(nRows)*static_cast<size_t>(nCols) -
    // rocksInBasicField;

    const auto& cLines = lines;

    const auto movePoint = [&lines = cLines](Point& p, Dir d, Coord stepMoreThan1 = 0U) {
        const Coord step = stepMoreThan1 + 1U; // include now the first.
        bool ok = true;
        switch (d) {
        case Dir::Down: {
            const auto nRows = lines.size();
            if ((p.y + step) >= nRows) {
                ok = false;
            } else {
                p.y += step;
            }
        } break;
        case Dir::Up:
            if (p.y < step) {
                ok = false;
            } else {
                p.y -= step;
            }
            break;
        case Dir::Right: {
            const auto nCols = lines[0].size();
            if ((p.x + step) >= nCols) {
                ok = false;
            } else {
                p.x += step;
            }
        } break;
        case Dir::Left:
            if (p.x < step) {
                ok = false;
            } else {
                p.x -= step;
            }
            break;
        }

        return ok;
    };

    static const auto rotateDir = [](Dir& dir, bool clockwise = true) {
        switch (dir) {
        case Dir::Down:
            dir = clockwise ? Dir::Left : Dir::Right;
            break;
        case Dir::Left:
            dir = clockwise ? Dir::Up : Dir::Down;
            break;
        case Dir::Up:
            dir = clockwise ? Dir::Right : Dir::Left;
            break;
        case Dir::Right:
            dir = clockwise ? Dir::Down : Dir::Up;
            break;
        }
    };

    const Coord nRows = cLines.size();
    if (nRows == 0U) {
        std::cout << "Empty field: zero rows\n";
        return static_cast<size_t>(0U);
    }
    const Coord nCols = cLines[0].size();

    std::set<Point> points; // TODO: unordered
    points.insert(startP);

    /*const auto printPoints = [&cLines, &startP](const auto& prPoints) {
        auto linesCopy = cLines;
        linesCopy[startP.y][startP.x] = '.';

        for (const auto& p : prPoints) {
            linesCopy[p.y][p.x] = 'O';
        }

        for (const auto& line : linesCopy) {
            std::cout << line << '\n';
        }
        std::cout << '\n';
    };*/

    constexpr PosCount NumSteps = 64U;

    auto allPoints = points;

    for (PosCount i = 0; i < NumSteps; ++i) {

        std::set<Point> newPoints;
        for (const auto& p : points) {
            Dir dir = Direction::Up;
            for (auto d = 0U; d < FourDir; ++d) {
                Point p2 = p;
                if (movePoint(p2, dir)) {
                    if (lines[p2.y][p2.x] != '#') {
                        newPoints.insert(p2);
                    }
                }
                rotateDir(dir);
            }
        }

        points = newPoints;
        allPoints.merge(newPoints);

        // printPoints(points);
    }

    std::cout << "Lines count " << lineCount << std::endl;
    std::cout << "N. field rows " << nRows << std::endl;
    std::cout << "N. field cols " << nCols << std::endl;
    std::cout << "Rock count " << rocksInBasicField << std::endl;
    std::cout << "Total tiles passed on or reached " << allPoints.size() << std::endl;
    std::cout << "Result Day 21 p.1 : " << points.size() << "\n\n\n";

    return points.size();
}

int main21p1()
{
    try {
        day21Part1(Input, false);
        // day21Part1("./21_input_file.txt",true);
    } catch (std::invalid_argument& ex) {
        std::cout << std::endl; // in order to flash
        std::cerr << "Bad input: " << ex.what() << std::endl;
        return 1;
    } catch (std::exception& ex) {
        std::cout << std::endl; // in order to flash
        std::cerr << "Error: " << ex.what() << std::endl;
        return 1;
    } catch (...) {
        std::cout << std::endl; // in order to flash
        std::cerr << "Unknown error: " << std::endl;
        return 1;
    }

    return 0;
}


/*
OUTPUT:

example:
Lines count 11
N. field rows 11
N. field cols 11
Rock count 40
Total tiles passed on or reached 81
Result: 42

real input:
Lines count 131
N. field rows 131
N. field cols 131
Rock count 1544
Total tiles passed on or reached 7533
Result: 3853
*/
