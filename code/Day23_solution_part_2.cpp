#include <algorithm>
#include <array>
#include <cmath>
#include <exception>
#include <fstream>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <string_view>
#include <unordered_set>
#include <vector>

namespace{

constexpr std::string_view Input =
false ?

"#.#####################\n"
"#.......#########...###\n"
"#######.#########.#.###\n"
"###.....#.>.>.###.#.###\n"
"###v#####.#v#.###.#.###\n"
"###.>...#.#.#.....#...#\n"
"###v###.#.#.#########.#\n"
"###...#.#.#.......#...#\n"
"#####.#.#.#######.#.###\n"
"#.....#.#.#.......#...#\n"
"#.#####.#.#.#########v#\n"
"#.#...#...#...###...>.#\n"
"#.#.#v#######v###.###v#\n"
"#...#.>.#...>.>.#.###.#\n"
"#####v#.#.###v#.#.###.#\n"
"#.....#...#...#.#.#...#\n"
"#.#########.###.#.#.###\n"
"#...###...#...#...#.###\n"
"###.###.#.###v#####v###\n"
"#...#...#.#.>.>.#.>.###\n"
"#.###.###.#.###.#.#v###\n"
"#.....###...###...#...#\n"
"#####################.#\n"

:

"#.###########################################################################################################################################\n"
"#.###.....................#...#.............#...#...###.......#.....#.....#.............###...#...#######...#...#...#...#...#.......#.......#\n"
"#.###.###################.#.#.#.###########.#.#.#.#.###.#####.#.###.#.###.#.###########.###.#.#.#.#######.#.#.#.#.#.#.#.#.#.#.#####.#.#####.#\n"
"#...#.#...................#.#.#.........#...#.#.#.#...#...#...#.#...#...#.#...#.........#...#...#...###...#.#.#.#.#.#.#.#.#.#.#.....#.#.....#\n"
"###.#.#.###################.#.#########.#.###.#.#.###.###.#.###.#.#####.#.###.#.#########.#########.###.###.#.#.#.#.#.#.#.#.#.#.#####.#.#####\n"
"###...#.........#...###...#.#.###.......#...#.#.#...#.#...#.....#.#...#.#...#.#.....>.>.#.#.........#...#...#.#...#...#.#.#...#.....#.#.#...#\n"
"###############.#.#.###.#.#.#.###.#########.#.#.###.#.#.#########.#.#.#.###.#.#######v#.#.#.#########.###.###.#########.#.#########.#.#.#.#.#\n"
"#.............#.#.#...#.#...#...#.......#...#.#.....#.#.......###...#.#...#...###.....#.#.#.#...#...#...#.###.#.......#...#.......#...#...#.#\n"
"#.###########.#.#.###.#.#######.#######.#.###.#######.#######.#######.###.#######.#####.#.#.#.#.#.#.###.#.###.#.#####.#####.#####.#########.#\n"
"#.......#...#...#.#...#.......#.#...#...#...#.......#.###...#.......#...#.#.......#...#.#.#...#.#.#...#.#...#...#.....#...#.....#.#...#...#.#\n"
"#######.#.#.#####.#.#########.#.#.#.#.#####.#######.#.###.#.#######.###.#.#.#######.#.#.#.#####.#.###.#.###.#####.#####.#.#####.#.#.#.#.#.#.#\n"
"#.......#.#.....#.#.#.......#.#.#.#.#.....#.#.....#.#.>.>.#.#...#...#...#.#.........#.#...#.....#...#.#.#...###...#.....#.......#...#...#...#\n"
"#.#######.#####.#.#.#.#####.#.#.#.#.#####.#.#.###.#.###v###.#.#.#.###.###.###########.#####.#######.#.#.#.#####.###.#########################\n"
"#.........#.....#.#.#...#...#.#...#.#.....#.#...#.#.###...#...#.#...#...#.#.........#...#...#.....#.#.#.#...>.>.###.....#...................#\n"
"###########.#####.#.###.#.###.#####.#.#####.###.#.#.#####.#####.###.###.#.#.#######.###.#.###.###.#.#.#.#####v#########.#.#################.#\n"
"#...........#...#.#...#.#.###.....#.#.#...#.....#.#...#...#...#.#...###...#.......#.....#...#.###.#.#.#.#.....#########...#.......#.........#\n"
"#.###########.#.#.###.#.#.#######.#.#.#.#.#######.###.#.###.#.#.#.###############.#########.#.###.#.#.#.#.#################.#####.#.#########\n"
"#.....#...###.#.#.#...#.#.###...#.#.#...#.....###.#...#.....#.#...#.......#.......#.......#.#.#...#.#.#.#.......###.......#.....#.#.........#\n"
"#####v#.#.###.#.#.#.###.#.###.#.#.#.#########.###.#.#########.#####.#####.#.#######.#####.#.#.#.###.#.#.#######.###.#####.#####.#.#########.#\n"
"#...#.>.#...#.#.#.#.#...#.#...#.#.#.>.>.#...#...#.#.#...#.....#.....#.....#.......#.#.....#...#.#...#...###...#...#.....#.......#...........#\n"
"#.#.#v#####.#.#.#.#.#.###.#.###.#.###v#.#.#.###.#.#.#.#.#.#####.#####.###########.#.#.#########.#.#########.#.###.#####.#####################\n"
"#.#...#...#...#.#.#.#.#...#...#...#...#.#.#...#.#...#.#.#.......#.....###.........#.#.......#...#.#.........#.....#...#.....................#\n"
"#.#####.#.#####.#.#.#.#.#####.#####.###.#.###.#.#####.#.#########.#######.#########.#######.#.###.#.###############.#.#####################.#\n"
"#.#...#.#.#...#...#...#.......###...###...#...#...#...#.....#...#...#...#...........#.......#.#...#...............#.#.......#...............#\n"
"#.#.#.#.#.#.#.###################.#########.#####.#.#######.#.#.###.#.#.#############.#######.#.#################.#.#######.#.###############\n"
"#...#...#...#.......#.....#.....#.#.......#.......#.#.....#...#.....#.#.........#...#.......#...#...#...#.........#...#...#...###...#...#####\n"
"###################.#.###.#.###.#.#.#####.#########.#.###.###########.#########.#.#.#######.#####.#.#.#.#.###########.#.#.#######.#.#.#.#####\n"
"#...........#...#...#...#.#...#.#.#.#.....###.....#...###...........#.....#...#...#.........#.....#...#.#...........#...#.......#.#...#.....#\n"
"#.#########.#.#.#.#####.#.###.#.#v#.#.#######.###.#################.#####.#.#.###############.#########.###########.###########.#.#########.#\n"
"#.#.......#...#...#####.#.#...#.>.>.#.###.....#...#.........#...#...#...#...#.....#.....#...#.........#.###.........#...#.......#.#.........#\n"
"#.#.#####.#############.#.#.#####v###.###.#####.###.#######.#.#.#.###.#.#########.#.###.#.#.#########.#.###v#########.#.#.#######.#.#########\n"
"#.#.#.....#.....#...#...#...#####...#...#.....#.###.......#...#...###.#...###...#...#...#.#.#...###...#...>.>.......#.#.#.....#...#.........#\n"
"#.#.#.#####.###.#.#.#.#############.###.#####.#.#########.###########.###.###.#.#####.###.#.#.#.###.#######v#######.#.#.#####.#.###########.#\n"
"#.#.#.#...#.###...#.#...###...###...###...#...#...###...#.....#.......#...#...#.....#...#.#.#.#.#...###.....#.......#.#.#.....#.#...........#\n"
"#.#.#.#.#.#.#######v###.###.#.###.#######.#.#####.###.#.#####.#.#######.###.#######.###.#.#.#.#.#.#####.#####.#######.#.#.#####.#.###########\n"
"#.#.#.#.#...###...#.>.#...#.#.....###...#...#.....#...#.#.....#.....#...#...#.....#.....#.#.#.#.#.....#.#...#.#...###.#.#.....#.#.#.......###\n"
"#.#.#.#.#######.#.#v#.###.#.#########.#.#####.#####.###.#.#########.#.###.###.###.#######.#.#.#.#####.#.#.#.#.#.#.###.#.#####v#.#.#.#####.###\n"
"#.#.#.#.#.......#.#.#.#...#.....#...#.#.....#.#...#.###.#...#...###.#...#.....###.#...#...#.#.#.....#.#...#.#.#.#.#...#...#.>.#.#.#.....#...#\n"
"#.#.#.#.#.#######.#.#.#.#######.#.#.#.#####.#.#.#.#.###.###.#.#.###.###.#########v#.#.#.###.#.#####.#.#####.#.#.#.#.#####.#.#v#.#.#####.###.#\n"
"#...#...#.......#.#.#...#.......#.#.#...#...#...#...#...#...#.#...#...#...#.....>.>.#...#...#.....#...#...#.#.#.#.#...#...#.#...#...#...#...#\n"
"###############.#.#.#####.#######.#.###.#.###########.###.###.###.###.###.#.#####v#######.#######.#####.#.#.#.#.#.###.#.###.#######.#.###.###\n"
"#...###...#.....#.#...#...#.....#.#...#.#.#...#...###...#.###...#.###...#.#...#...###.....#.....#.#.....#.#.#.#.#...#.#.....#.......#.#...###\n"
"#.#.###.#.#.#####.###.#.###.###.#.###.#.#.#.#.#.#.#####.#v#####.#.#####.#.###.#.#####.#####.###.#.#.#####.#.#.#.###.#.#######.#######.#.#####\n"
"#.#.....#.#.....#.#...#...#.#...#.#...#.#...#...#.....#.>.>...#.#.#...#.#.#...#.....#.#...#...#.#.#.....#.#.#...###...#...###.........#.....#\n"
"#.#######.#####.#.#.#####.#.#.###.#.###.#############.###v###.#.#.#.#.#.#.#.#######.#.#.#.###.#.#.#####.#.#.###########.#.#################.#\n"
"#...#...#.......#...#####...#.....#...#.###...........###...#...#.#.#.#.#.#.#...#...#...#.....#...#...#.#.#...........#.#...................#\n"
"###.#.#.#############################.#.###.###############.#####.#.#.#.#.#.#.#.#.#################.#.#.#.###########.#.#####################\n"
"#...#.#.#.........#.....###...........#.#...#.....#.......#.....#.#.#.#.#.#.#.#...#...###.....#.....#...#.......#.....#.#...#...#...#...#####\n"
"#.###.#.#.#######.#.###.###.###########.#.###.###.#.#####.#####.#.#.#.#.#.#.#.#####.#.###.###.#.###############.#.#####.#.#.#.#.#.#.#.#.#####\n"
"#.....#...#.......#.#...#...#.....#...#.#.....#...#.....#.#.....#.#.#.#.#...#.#...#.#.....#...#...............#.#.....#.#.#.#.#...#...#.....#\n"
"###########.#######.#.###.###.###.#.#.#.#######.#######.#.#.#####.#.#.#.#####.#.#.#.#######.#################.#.#####.#.#.#.#.#############.#\n"
"###...#...#.........#...#...#...#...#.#.#.....#...#...#.#.#.....#...#.#.#.....#.#.#.#.......#.....#####.......#.......#...#...#...#...#.....#\n"
"###.#.#.#.#############.###.###.#####.#.#.###.###.#.#.#.#.#####.#####.#.#.#####.#.#.#.#######.###.#####v#######################.#.#.#.#.#####\n"
"#...#...#.....#...#...#...#.....#...#...#...#.....#.#.#.#.......#...#...#.....#.#.#.#.......#...#...#.>.>.....#...#.....###...#.#...#...#...#\n"
"#.###########.#.#.#.#.###.#######.#.#######.#######.#.#.#########.#.#########.#.#.#.#######.###.###.#.#v#####.#.#.#.###.###.#.#.#########.#.#\n"
"#...........#.#.#...#.#...#.....#.#...#...#.......#.#.#.....###...#...###...#.#.#...#.......###...#...#.#...#...#...#...#...#.#...........#.#\n"
"###########.#.#.#####.#.###.###.#.###.#.#.#######.#.#.#####v###.#####.###.#.#.#.#####.###########.#####.#.#.#########.###.###.#############.#\n"
"#...#.......#.#.....#...#...#...#...#...#.........#.#.....>.>.#.#.....#...#.#.#.#.....#...###.....#.....#.#.#.......#.###...#.#...#.........#\n"
"#.#.#.#######.#####.#####.###.#####.###############.#######v#.#.#.#####.###.#.#.#.#####.#.###.#####.#####.#.#.#####.#.#####.#.#.#.#.#########\n"
"#.#.#.......#.....#...#...#...#...#.........#.....#.......#.#.#.#...###.#...#...#.......#...#.....#.....#.#...#...#...#...#.#...#.#.....#####\n"
"#.#.#######.#####.###.#.###.###.#.#########.#.###.#######.#.#.#.###.###.#.#################.#####.#####.#.#####.#.#####.#.#.#####.#####.#####\n"
"#.#.###.....#...#.....#.#...#...#.#.......#.#...#.###...#.#.#.#...#...#.#...#...#...#.......###...#.....#...#...#.#...#.#.#.....#.....#.....#\n"
"#.#.###.#####.#.#######.#.###.###.#.#####.#.###.#.###.#.#.#.#.###.###.#.###.#.#.#.#.#.#########.###.#######.#.###.#.#.#.#.#####.#####.#####.#\n"
"#.#...#.....#.#.......#.#.#...#...#.....#.#...#.#...#.#.#.#.#.#...###.#.#...#.#.#.#.#.#...###...###...#.....#.#...#.#.#.#.#...#.....#.#...#.#\n"
"#.###.#####.#.#######.#.#.#.###.#######.#.###.#.###.#.#.#.#.#.#.#####.#.#.###.#.#.#.#.#.#.###.#######.#.#####.#.###.#.#.#.#.#.#####.#.#.#.#.#\n"
"#...#.#...#...#.......#.#.#...#.#...###.#.#...#.#...#.#...#.#...#.....#.#...#.#.#.#.#.#.#.#...###.....#...#...#...#.#.#.#.#.#.#...#.#.#.#.#.#\n"
"###.#.#.#.#####v#######.#.###.#.#.#.###.#.#v###.#.###.#####.#####.#####.###.#.#.#.#.#v#.#.#.#####.#######.#.#####.#.#.#.#.#.#.#.#.#.#.#v#.#.#\n"
"#...#...#...###.>...#...#...#.#.#.#.#...#.>.>...#...#.#...#.....#.#.....#...#.#.#.#.>.>.#.#.....#.....#...#.#.....#.#...#.#.#.#.#.#.#.>.#...#\n"
"#.#########.###v###.#.#####.#.#.#.#.#.#####v#######.#.#.#.#####.#.#.#####.###.#.#.###v###.#####.#####.#.###.#.#####.#####.#.#.#.#.#.###v#####\n"
"#.........#.#...###...#...#...#...#...#####.......#...#.#.......#.#.....#...#.#.#.###...#.#.....#...#.#.#...#.....#.###...#.#...#.#.###.....#\n"
"#########.#.#.#########.#.#######################.#####.#########.#####.###.#.#.#.#####.#.#.#####.#.#.#.#.#######.#.###.###.#####.#.#######.#\n"
"#.........#...###...#...#...#...#...#...###...#...#.....#.......#...#...#...#.#...#...#.#...#...#.#.#.#...#.......#...#.#...#...#...#...#...#\n"
"#.###############.#.#.#####.#.#.#.#.#.#.###.#.#.###.#####.#####.###.#.###.###.#####.#.#.#####.#.#.#.#.#####.#########.#.#.###.#.#####.#.#.###\n"
"#...#.......#...#.#.#.....#.#.#.#.#.#.#...#.#.#.###.......#...#...#...###...#.#.....#...###...#.#.#...#...#.#...#.....#...###.#.#...#.#...###\n"
"###.#.#####.#.#.#.#.#####.#.#.#.#.#.#v###.#.#.#.###########.#.###.#########.#.#.###########.###.#.#####.#.#.#.#.#.###########.#.#.#.#.#######\n"
"#...#.#.....#.#.#.#.#.....#.#.#...#.>.>.#...#.#.#...#.......#.#...###...#...#.#.............#...#.......#.#...#...#.....#...#.#.#.#.#.#.....#\n"
"#.###.#.#####.#.#.#.#.#####.#.#######v#.#####.#.#.#.#.#######.#.#####.#.#.###.###############.###########.#########.###.#.#.#.#.#.#.#.#.###.#\n"
"#.....#...#...#.#.#.#.#.....#...#...#.#...###...#.#.#.......#...#...#.#.#...#.#...............#...#.......###...###...#.#.#.#.#.#.#.#...#...#\n"
"#########.#.###.#.#.#.#.#######.#.#.#.###.#######.#.#######.#####.#.#.#.###.#.#.###############.#.#.#########.#.#####.#.#.#.#.#.#.#.#####v###\n"
"#.........#.###...#.#.#...#.....#.#.#...#...#...#.#.#.......###...#.#.#...#.#.#.....#...###...#.#.#.....#.....#...#...#.#.#.#.#.#.#.....>.###\n"
"#.#########.#######.#.###.#.#####.#.###.###.#.#.#.#.#.#########.###.#.###.#.#.#####.#.#.###.#.#.#.#####.#.#######.#.###.#.#.#.#.#.#######v###\n"
"#.........#.....#...#.#...#.#.....#.#...###.#.#.#.#.#...###...#.#...#.#...#...#...#...#...#.#...#.#.....#.#.......#...#.#.#.#.#.#.#.......###\n"
"#########v#####.#.###.#.###.#.#####.#.#####.#.#.#.#.###v###.#.#.#.###.#.#######.#.#######.#.#####.#.#####.#.#########.#.#.#.#.#.#.#.#########\n"
"###...###.>.....#.....#...#.#.#...#...###...#.#.#.#...>.>.#.#.#.#.#...#.#...#...#.#...#...#.....#.#...###.#.#...#...#.#.#.#.#.#...#.........#\n"
"###.#.###v###############.#.#.#.#.#######.###.#.#.#####v#.#.#.#.#.#.###.#.#.#.###.#.#.#.#######.#.###v###.#.#.#.#.#.#.#.#.#.#.#############.#\n"
"#...#.....###.........###...#...#.......#...#.#...#.....#.#.#.#.#.#.#...#.#.#.#...#.#.#.#...#...#...>.>.#.#.#.#.#.#.#.#.#.#...#...#...#...#.#\n"
"#.###########.#######.#################.###.#.#####.#####.#.#.#.#.#.#.###.#.#.#.###.#.#v#.#.#.#######v#.#.#.#.#.#.#.#.#.#.#####.#.#.#.#.#.#.#\n"
"#.............#...#...#...........###...###...#.....#...#...#.#.#.#.#.#...#.#.#...#.#.>.>.#.#...#.....#...#...#...#.#.#.#.#.....#...#...#...#\n"
"###############.#.#.###.#########.###.#########.#####.#.#####.#.#.#.#.#.###.#.###.#.###v###.###.#.#################.#.#.#.#.#################\n"
"#...............#...###.........#.....#.......#.......#.....#.#.#.#.#.#.#...#.###...#...###.#...#.........#...#...#...#...#.#...#...#...#...#\n"
"#.#############################.#######.#####.#############.#.#.#.#.#.#.#.###.#######.#####.#.###########.#.#.#.#.#########.#.#.#.#.#.#.#.#.#\n"
"#...........#...........###...#.........#.....#.............#...#.#.#...#.#...#.....#.....#.#...#.........#.#...#.....#...#...#...#...#.#.#.#\n"
"###########.#.#########.###.#.###########.#####.#################.#.#####.#.###.###.#####.#.###.#.#########.#########.#.#.#############.#.#.#\n"
"#...........#.#.........#...#.............#####.#...#.....#.....#...#...#...###...#.#.....#...#.#...........#.........#.#.#...#...#...#...#.#\n"
"#.###########.#.#########.#####################.#.#.#.###.#.###.#####.#.#########.#.#.#######.#.#############.#########.#.#.#.#.#.#.#.#####.#\n"
"#...........#.#.#.....###.....................#.#.#...###...#...#...#.#.#.........#.#...#...#...#...#####.....#...#...#.#...#.#.#...#.......#\n"
"###########.#.#.#.###.#######################.#.#.###########.###.#.#.#.#.#########.###.#.#.#####.#.#####.#####.#.#.#.#.#####.#.#############\n"
"#...........#.#...#...#...###...#...#.........#...#.....#.....#...#.#.#.#.......###.....#.#.#...#.#.......#...#.#.#.#.#.....#...#...#...#...#\n"
"#.###########.#####.###.#.###.#.#.#.#.#############.###.#.#####.###.#.#.#######.#########.#.#.#.#.#########.#.#.#.#.#.#####.#####.#.#.#.#.#.#\n"
"#.#.....#.....#.....###.#...#.#...#...#...#...#...#...#...#####...#.#.#.###.....#...#...#.#.#.#.#.........#.#.#.#...#.#.....#...#.#...#.#.#.#\n"
"#.#.###.#.#####.#######.###.#.#########.#.#.#.#.#.###.###########.#.#.#.###v#####.#.#.#.#.#.#.#.#########.#.#.#.#####.#.#####.#.#.#####.#.#.#\n"
"#.#.#...#...#...###...#...#.#...........#.#.#...#...#.....#.....#.#.#.#.#.>.>.....#.#.#.#.#.#.#...###...#...#...#.....#.......#...#.....#.#.#\n"
"#.#.#v#####.#.#####.#.###.#.#############.#.#######.#####.#.###.#.#.#.#.#.#v#######.#.#.#.#.#.###.###.#.#########.#################.#####.#.#\n"
"#...#.>...#.#...#...#...#.#.......#.......#...#.....#...#.#...#.#.#.#.#...#...#.....#.#.#.#.#...#.###.#.#.........#...#.....#.....#.#.....#.#\n"
"#####v###.#.###.#.#####.#.#######.#.#########.#.#####.#.#.###.#.#.#.#.#######.#.#####.#.#.#.###.#.###.#.#v#########.#.#.###.#.###.#.#.#####.#\n"
"#...#...#.#.###...#...#.#.#.......#.......#...#...#...#.#.#...#.#.#.#...#.....#.....#.#.#.#.#...#.#...#.>.>...#...#.#.#.#...#...#.#...#...#.#\n"
"#.#.###.#.#.#######.#.#.#.#.#############.#.#####.#.###.#.#.###.#.#.###.#.#########.#.#.#.#.#.###.#.#####v###.#.#.#.#.#.#.#####.#.#####.#.#.#\n"
"#.#.#...#...#...###.#...#.#.#...#...#.....#...#...#...#.#.#...#.#.#...#.#.........#.#.#.#.#.#...#.#.#...#...#.#.#.#.#.#.#.#...#.#.#...#.#.#.#\n"
"#.#.#.#######.#.###.#####.#.#.#.#.#.#v#######.#.#####.#.#v###.#.#.###.#.#########.#.#.#.#.#.###.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#v#.#.#\n"
"#.#...###...#.#...#.#.....#...#.#.#.>.>.#...#.#.#...#.#.>.>.#.#...#...#.#.........#.#.#.#.#.#...#...#.#.#...#...#.#.#...#.#.#.#.#...#.>.#.#.#\n"
"#.#######.#.#.###.#.#.#########.#.###v#.#.#.#.#.#.#.#.###v#.#.#####.###.#.#########.#.#.#.#.#.#######.#.#.#######.#.#####.#.#.#.#######v#.#.#\n"
"#.#...###.#...#...#.#.......#...#...#.#...#.#.#.#.#.#.#...#...#...#...#.#.......###.#.#.#.#.#...#.....#...#...#...#.....#...#...###...#.#...#\n"
"#.#.#.###.#####.###.#######.#.#####.#.#####.#.#.#.#.#.#.#######.#.###.#.#######.###.#.#.#.#.###.#.#########.#.#.#######.###########.#.#.#####\n"
"#.#.#...#.....#...#.#...#...#.#.....#...#...#.#.#.#...#.......#.#...#.#.#.....#...#...#...#.#...#...........#.#...#.....#...###.....#.#.....#\n"
"#.#.###.#####.###.#.#.#.#.###.#.#######.#.###.#.#.###########.#.###.#.#.#.###.###.#########.#.###############.###.#.#####.#.###.#####.#####.#\n"
"#...###.#.....#...#...#...#...#.#.......#...#.#...#...........#.#...#...#...#.....###...###...###.............###...###...#.....#...#.......#\n"
"#######.#.#####.###########.###.#.#########.#.#####.###########.#.#########.#########.#.#########.#####################.#########.#.#########\n"
"#.......#.#.....#...#...###...#.#.....#####...#...#.........#...#.......###.........#.#...###...#.......#...#...###...#...........#.#...#...#\n"
"#.#######.#.#####.#.#.#.#####.#.#####.#########.#.#########.#.#########.###########.#.###.###.#.#######.#.#.#.#.###.#.#############.#.#.#.#.#\n"
"#...#...#.#...#...#...#...###...#...#.......#...#.....#.....#.#.........#...........#...#.#...#.#...###...#...#.....#.....#.........#.#...#.#\n"
"###.#.#.#.###.#.#########.#######.#.#######.#.#######.#.#####.#.#########.#############.#.#.###.#.#.#####################.#.#########.#####.#\n"
"###.#.#.#.###...#...#...#.....#...#.........#...#.....#.......#...###...#...........#...#.#.#...#.#.....#...........#...#.#.........#.#.....#\n"
"###.#.#.#.#######.#.#.#.#####.#.###############.#.###############.###.#.###########.#.###.#.#.###.#####.#.#########.#.#.#.#########.#.#.#####\n"
"###...#.#.#.......#...#.......#...........#...#.#.....#...........#...#.###...#.....#...#.#.#...#.....#.#.........#...#...###.......#.#.....#\n"
"#######.#.#.#############################.#.#.#.#####.#.###########.###.###.#.#v#######.#.#.###.#####.#.#########.###########.#######.#####.#\n"
"#.....#...#.......#...###...#...#.........#.#.#.#.....#.......#...#...#.#...#.>.>...###.#.#.#...#...#.#.###.......#.....#.....#.......#.....#\n"
"#.###.###########.#.#.###.#.#.#.#.#########.#.#.#.###########.#.#.###.#.#.#########.###.#.#.#.###.#.#.#.###v#######.###.#.#####.#######.#####\n"
"#...#.#...........#.#...#.#...#.#.....#...#.#.#.#.#...###...#...#...#.#.#.....#...#...#.#.#.#...#.#.#.#...>.>.......#...#.....#.#.....#.....#\n"
"###.#.#.###########.###.#.#####.#####.#.#.#.#.#.#.#.#.###.#.#######v#.#.#####.#.#.###.#.#.#.###.#.#.#.###############.#######.#.#.###.#####.#\n"
"#...#.#...........#...#.#.#.....#...#.#.#.#.#.#.#.#.#.#...#...#...>.>.#.#...#.#.#.....#.#.#.#...#.#.#.#...............#######...#...#...#...#\n"
"#.###.###########.###.#.#.#.#####.#.#v#.#.#.#.#.#.#.#.#.#####.#.#######.#.#.#.#.#######.#.#.#.###.#.#.#.###########################.###.#.###\n"
"#...#.............#...#.#.#.#...#.#.>.>.#.#.#.#.#.#.#.#.#.....#.......#.#.#.#.#.#...#...#...#.#...#.#.#.#.......#.......###...#...#.###...###\n"
"###.###############.###.#.#.#.#.#.#######.#.#.#.#.#.#.#.#.###########.#.#.#.#.#.#.#.#.#######.#.###.#.#.#.#####.#.#####.###.#.#.#.#.#########\n"
"###...............#...#.#.#.#.#.#...#.....#.#.#.#...#.#.#.....#.....#.#.#.#.#.#...#.#.###.....#...#...#...#...#...#.....#...#...#.#...#.....#\n"
"#################.###.#.#.#.#.#.###.#.#####.#.#.#####.#.#####.#.###.#.#.#.#.#.#####.#.###.#######.#########.#.#####.#####.#######.###.#.###.#\n"
"#.......#...#...#.#...#.#.#...#.#...#...#...#.#.#.....#...#...#...#...#.#.#.#...#...#.#...#...#...#.........#.......#...#.....#...#...#...#.#\n"
"#.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.###.#.#.#######.#.#####.#####.#.#.###.#.###.#.###.#.#.###.#################.#.#####.#.###v#####.#.#\n"
"#.#...#...#...#...#...#.#.....#.#.....#.#...#.#.#...#...#.#.....#.....#.#.#.#...#.#...#...#.#.#.#...#.....#.....#...#.#.#...#.#.#.>.#...#.#.#\n"
"#.#.#.###############.#.#####.#.#####.#.###.#.#.###.#.#.#.#####.#####.#.#.#.#.###.#.#####.#.#.#.#.###.###.#.###.#.#.#.#.#.#.#.#.#.#v#.#.#.#.#\n"
"#...#.................#.......#.......#.....#...###...#...#####.......#...#...###...#####...#...#.....###...###...#...#...#...#...#...#...#.#\n"
"###########################################################################################################################################.#\n"

;

using Coord = size_t;

struct Point {
    Coord x;
    Coord y;
};
bool operator==(const Point& p1, const Point& p2)
{
    return (p1.x == p2.x) && (p1.y == p2.y);
}
bool operator<(const Point& p1, const Point& p2)
{
    if (p1.y != p2.y) {
        return (p1.y < p2.y);
    }
    return (p1.x < p2.x);
}
bool operator!=(const Point& p1, const Point& p2)
{
    return !(p1 == p2);
}
std::string pointToStr(Point p)
{
    using std::literals::string_literals::operator""s;
    return "("s + std::to_string(p.x) + ", " + std::to_string(p.y) + ')';
}

enum class Direction : unsigned { Right, Down, Left, Up };

constexpr unsigned FourDir = 4U;

template<typename E>
constexpr auto toUnderlying(const E e) noexcept
{
    return static_cast<std::underlying_type_t<E>>(e);
}

/*std::string dirToStr(Direction d)
{
    using std::literals::string_literals::operator""s;
    switch (d) {
    case Direction::Right:
        return "Right";
    case Direction::Down:
        return "DownUp";
    case Direction::Left:
        return "Left";
    case Direction::Up:
        return "Up";
    default:
        throw std::runtime_error(
            "Inconsistent direction to print: "s + std::to_string(toUnderlying(d)));
    }
}*/

} // namespace

// when runPart1 is true, arrows are not changed into paths '.'
auto day23Part2(std::string_view streamSource, bool sourceIsFilePath, bool runPart1 = false)
{
    std::shared_ptr<std::istream> inputStream;

    if (sourceIsFilePath) {
        inputStream = std::static_pointer_cast<std::istream>(
            std::make_shared<std::ifstream>(std::string(streamSource)));
    } else {
        auto sstream = std::make_shared<std::stringstream>();
        (*sstream) << streamSource;
        // use std::move(sstream) in C++20 or more.
        inputStream = std::static_pointer_cast<std::istream>(sstream);
    }

    std::vector<std::string> lines;
    Coord rowsLength{};

    using Dir = Direction;

    using PosCount = unsigned long;

    Point startP{};
    Point goalP{};

    size_t tilesCount = 0U;
    size_t arrowCount = 0U;

    unsigned lineCount{0U};
    constexpr auto MaxLineLength = 1000;
    std::array<char, MaxLineLength + 1> cc{};
    while (inputStream->getline(cc.data(), MaxLineLength, '\n')) {
        ++lineCount;
        std::string errorLine
            = "Input error at the line n. " + std::to_string(static_cast<int>(lineCount)) + " : ";

        auto c = static_cast<size_t>(inputStream->gcount());
        // 'c' includes the delimiter, which is replaced by '\0'.
        if (c > MaxLineLength) {
            throw std::invalid_argument(errorLine + "longer than " + std::to_string(MaxLineLength));
        }

        std::string line;
        // std::cout << "length = " << c << '\n';
        if (cc.at(c - 1U) == '\0') { // 'c' is positive as line has been extracted.
            --c; // excludes '\0' that replaced the delimiter '\n'.
        }
        line = std::string_view(cc.data(), c);
        // std::cout << "line: " << line << '\n';

        // std::stringstream lineStream;
        // lineStream << line;

        static std::set<char> acceptedChars{'#', '.', '<', '>', '^', 'v'};

        if (line.empty()) {
            std::cout << "WARNING: empty line\n";
            continue;
        } // else:

        if (!std::all_of(line.cbegin(), line.cend(), [](const char ch) {
                return acceptedChars.count(ch) > 0U;
            })) {
            throw std::invalid_argument(errorLine + "some unexpected character");
        }

        if (lines.empty()) {
            rowsLength = line.size();

            // look for the single start
            auto posPath = line.find('.');

            if ((posPath == std::string::npos)
                || (line.find('.', posPath + 1U) != std::string::npos)) {
                throw std::invalid_argument(
                    errorLine + "not just a dot '.' in first line as start");
            }

            startP = Point{posPath, 0U};
        } else if (rowsLength != line.size()) {
            throw std::invalid_argument(errorLine + "line length different from previous ones");
        }

        --arrowCount; // against overflow (despite not really a problem)
        for (const auto ch : line) {
            switch (ch) {
            case '#':
                break;
            case '.':
                ++tilesCount;
                --arrowCount;
                [[fallthrough]];
            default:
                ++arrowCount;
            }
        }
        ++arrowCount; // restore

        if (!runPart1) {
            std::transform(line.cbegin(), line.cend(), line.begin(), [](char ch) {
                if (ch != '#') {
                    ch = '.';
                }
                return ch;
            });
        }

        lines.push_back(std::move(line));
    }

    if (lines.size() < 2U) {
        throw std::invalid_argument("The number of lines in the field is less than 2");
    }

    const auto& cLines = lines;

    const auto movePoint = [&lines = cLines](
                               Point& p,
                               Dir d,
                               Coord stepMoreThan1 = 0U,
                               bool acceptBeyond = false,
                               bool toroidal = false) {
        static const Coord nRows = lines.size();
        static const Coord nCols = lines[0].size();

        const Coord step = stepMoreThan1 + 1U; // include now the first.
        bool ok = true;
        switch (d) {
        case Dir::Down: {
            if ((!acceptBeyond) && ((p.y + step) >= nRows)) {
                if (toroidal) {
                    (p.y += step) -= nRows;
                } else {
                    ok = false;
                }
            } else {
                p.y += step;
            }
        } break;
        case Dir::Up: {
            if ((!acceptBeyond) && (p.y < step)) {
                if (toroidal) {
                    (p.y += nRows) -= step;
                } else {
                    ok = false;
                }
            } else {
                p.y -= step;
            }
        } break;
        case Dir::Right: {
            if ((!acceptBeyond) && ((p.x + step) >= nCols)) {
                if (toroidal) {
                    (p.x += step) -= nCols;
                } else {
                    ok = false;
                }
            } else {
                p.x += step;
            }
        } break;
        case Dir::Left: {
            if ((!acceptBeyond) && (p.x < step)) {
                if (toroidal) {
                    (p.x += nCols) -= step;
                } else {
                    ok = false;
                }
            } else {
                p.x -= step;
            }
        } break;
        }

        return ok;
    };

    static const auto rotateDir = [](Dir& dir, bool clockwise = true) {
        switch (dir) {
        case Dir::Down:
            dir = clockwise ? Dir::Left : Dir::Right;
            break;
        case Dir::Left:
            dir = clockwise ? Dir::Up : Dir::Down;
            break;
        case Dir::Up:
            dir = clockwise ? Dir::Right : Dir::Left;
            break;
        case Dir::Right:
            dir = clockwise ? Dir::Down : Dir::Up;
            break;
        }
    };

    static const auto getArrowDir = [](const char ch) {
        switch (ch) {
        case '>':
            return Dir::Right;
        case '<':
            return Dir::Left;
        case '^':
            return Dir::Up;
        default:
            return Dir::Down; //'v'
        }
    };

    const auto nRows = lines.size();
    const auto nCols = lines[0].size();

    {
        // look for the single goal
        const auto& lastLine = lines.back();
        auto posPath = lastLine.find('.');
        if ((posPath == std::string::npos)
            || (lastLine.find('.', posPath + 1U) != std::string::npos)) {
            throw std::invalid_argument("not a single dot '.' in last line as goal");
        }
        goalP = Point{posPath, nRows - 1U};
    }

    // preliminary search points with more than two near points.
    std::set<Point> allKnownKnotPoints; // unordered
    Point p{0U, 0U};
    for (; p.x < nCols; ++p.x) {
        p.y = 0U;
        for (; p.y < nRows; ++p.y) {
            if (lines[p.y][p.x] != '#') {
                unsigned count = 0U;
                Dir dir = Direction::Up;
                for (auto d = 0U; d < FourDir; ++d) {
                    Point pNear = p;
                    if (movePoint(pNear, dir)) {
                        if (lines[pNear.y][pNear.x] != '#') {
                            ++count;
                        }
                    }

                    rotateDir(dir);
                }

                if (count > 2U) {
                    allKnownKnotPoints.insert(p);
                }
            }
        }
    }
    allKnownKnotPoints.insert(startP);
    allKnownKnotPoints.insert(goalP);

    // TODO: likely copy from Floyd, Ford, Fulkerson, Bellmann, etc.

    // phase 1: search connections between allKnownKnotPoints.
    std::map<Point, std::map<Point, PosCount>> distances;
    unsigned long connections = 0U;

    for (const auto point : allKnownKnotPoints) {
        std::set<std::pair<Point, Dir>> nextPoints;
        nextPoints.emplace(point, Dir{});

        PosCount distance = 0U;

        while (!nextPoints.empty()) {
            ++distance;

            std::set<std::pair<Point, Dir>> newPoints;
            for (const auto& pointAndDir : nextPoints) {
                Point p = pointAndDir.first;
                Dir dir = pointAndDir.second;
                // from the same as before, in order to simply avoid the case d==2

                const auto ch = lines[p.y][p.x];
                bool oneDirOnly = false;
                if (ch != '.') {
                    // to support part 1 when runPart1==true
                    dir = getArrowDir(ch);
                    oneDirOnly = true;
                }

                for (auto d = 0U; d < FourDir; ++d) {
                    Point pNear = p;
                    if (((d != 2) || (p == point)) && movePoint(pNear, dir) && (pNear != point)
                        && (lines[pNear.y][pNear.x] != '#')) {
                        if (allKnownKnotPoints.count(pNear) > 0U) {
                            distances[point][pNear] = distance;
                            ++connections;
                        } else {
                            newPoints.emplace(pNear, dir);
                        }
                    }

                    if (oneDirOnly) {
                        break;
                    }

                    rotateDir(dir);
                }
            }

            nextPoints = std::move(newPoints);
        }
    }

    // then translate points to indexes, it is lighter to manage.
    using PointIdx = size_t;
    allKnownKnotPoints.erase(startP);
    allKnownKnotPoints.erase(goalP);

    std::vector<Point> knotPoints{startP}; // set but not really read, except size.
    std::map<Point, PointIdx> knotPointsIdx{{startP, 0U}};
    const auto startIdx = 0U;

    for (const auto point : allKnownKnotPoints) {
        // if ((point != startP) && (point != goalP))
        // check replaced by the temporary removal from allKnownKnotPoints.
        {
            knotPointsIdx.emplace(point, knotPoints.size());
            knotPoints.push_back(point);
        }
    }
    knotPointsIdx.emplace(goalP, knotPoints.size());
    knotPoints.push_back(goalP);

    // reinsert.
    allKnownKnotPoints.insert(startP);
    allKnownKnotPoints.insert(goalP);

    using MapDistancesFromPoint = std::map<size_t, PosCount>;
    using Distances = std::vector<MapDistancesFromPoint>;
    Distances distancesIdx(allKnownKnotPoints.size(), MapDistancesFromPoint());
    Distances distancesBackIdx(allKnownKnotPoints.size(), MapDistancesFromPoint());
    for (const auto& [point, distFromP] : distances) {
        const auto pointIdx = knotPointsIdx[point];
        auto& distFromPIdx = distancesIdx[pointIdx];
        for (const auto [pOther, dist] : distFromP) {
            const auto pOtherIdx = knotPointsIdx[pOther];
            distFromPIdx.emplace(pOtherIdx, dist);
            distancesBackIdx[pOtherIdx][pointIdx] = dist;
        }
    }


    const auto goalIdx = knotPointsIdx[goalP]; // 0U

    // search longest path with dynamic programming.
    using KnotPoints = std::set<PointIdx>;
    using Path = KnotPoints;

    using PointAndPath = std::pair<PointIdx, Path>;

    static const auto ppBySmallerSetL = [](const PointAndPath& pp1, const PointAndPath& pp2) {
        if (pp1.second.size() != pp2.second.size()) {
            return (pp1.second.size() < pp2.second.size());
        }
        // does not matter the pther criteria, start from the simplest.
        if (pp1.first != pp2.first) {
            return (pp1.first < pp2.first);
        }
        return (pp1.second < pp2.second);
    };
    static std::function<bool(const PointAndPath&, const PointAndPath&)> ppBySmallerSet
        = ppBySmallerSetL;

    std::map<PointAndPath, std::pair<PosCount, PointIdx>> maxPathFromPP;
    // for each couple point-path, the best couple distance/successive (best by minor distance).

    std::map<PointIdx, std::pair<PosCount, Path>> maxPathFrom;
    // for each point, the minor distance and corresponding path.


    std::set<PointAndPath, decltype(ppBySmallerSet)> nextPPback(ppBySmallerSet);
    nextPPback.insert(PointAndPath{goalIdx, Path{goalIdx}});

    bool okCheckTooManyCycles = true;
    // all possible subsets, each multiplied by the max number of times the same subset
    // may be scrolled for updates.
    constexpr long double BaseTwoForSetcount = 2.L;
    long double maxComb = std::pow(BaseTwoForSetcount, allKnownKnotPoints.size());
    if (maxComb == HUGE_VALL) {
        std::cout << "long double not enough to check self-error";
        okCheckTooManyCycles = false;
    } else if (maxComb > std::numeric_limits<long double>::max() / allKnownKnotPoints.size()) {
        std::cout << "long double not enough to check self-error";
        okCheckTooManyCycles = false;
    } else {
        maxComb *= allKnownKnotPoints.size();
    }

    PosCount cycleNumber = 0U;
    PosCount ppNumber = 0U;
    while (!nextPPback.empty()) {
        std::set<PointAndPath, decltype(ppBySmallerSet)> newPPback(ppBySmallerSet);

        if (okCheckTooManyCycles && (maxComb < static_cast<long double>(++cycleNumber))) {
            throw std::invalid_argument("no path from start to goal");
        }

        while (!nextPPback.empty()) {
            ++ppNumber;
            auto node = nextPPback.extract(nextPPback.begin());
            auto pointIdx = node.value().first;
            auto sourcePathToGoal = std::move(node.value().second);

            sourcePathToGoal.erase(pointIdx);
            PosCount maxDist = 0U;

            PointIdx succIdx{};

            for (const auto [pNearIdx, dist] : distancesIdx[pointIdx]) {
                if ((pNearIdx != startIdx) && sourcePathToGoal.count(pNearIdx) > 0U) {
                    const auto itPP
                        = maxPathFromPP.find(std::make_pair(pNearIdx, sourcePathToGoal));
                    if (itPP != maxPathFromPP.end()) {
                        // It means it is possible to move from nearP to goal
                        // using only the elements in sourcePathToGoalCopy (that includes
                        // nearP), For sure its max distance has been computed, due to the
                        // procedure to advance by increasing-size sets.

                        PosCount newDist = dist + itPP->second.first;
                        if (newDist > maxDist) {
                            maxDist = newDist;
                            succIdx = pNearIdx;
                        }
                    }
                }
            }
            // Two separated cycles, in order to support the case runPart1.
            for (const auto [pNearIdx, dist] : distancesBackIdx[pointIdx]) {
                if (sourcePathToGoal.count(pNearIdx) == 0U) {
                    auto sourcePathToGoalCopy = sourcePathToGoal;
                    sourcePathToGoalCopy.insert(pointIdx);
                    sourcePathToGoalCopy.insert(pNearIdx);
                    newPPback.emplace(PointAndPath{pNearIdx, std::move(sourcePathToGoalCopy)});
                }
            }

            sourcePathToGoal.insert(pointIdx); // restore

            auto& distandPathForPoint = maxPathFrom[pointIdx];
            auto& maxPath = distandPathForPoint.first;
            if (maxDist > maxPath) {
                maxPath = maxDist;
                distandPathForPoint.second = sourcePathToGoal;
            }

            maxPathFromPP.emplace(
                PointAndPath{pointIdx, std::move(sourcePathToGoal)},
                std::make_pair(maxDist, succIdx));
        }

        nextPPback = std::move(newPPback);
    }

    PosCount res = maxPathFrom[knotPointsIdx[startP]].first;
    if (res == 0U) {
        std::cout << "No good path from start to goal!\n";
    }

    std::cout << "Lines count " << lineCount << std::endl;
    std::cout << "Tiles (including arrows) count " << tilesCount << std::endl;
    std::cout << "Arrow count " << arrowCount << std::endl;
    std::cout << "Number of knot tiles: " << allKnownKnotPoints.size() << std::endl;
    std::cout << "Number of connections: " << (connections / 2U) << std::endl;
    std::cout << "Number of computing cycles: " << cycleNumber << std::endl;
    std::cout << "Number of points and paths: " << ppNumber << std::endl;
    std::cout << std::endl;
    PointIdx scrollIdx = startIdx;
    auto residualSetIdx = maxPathFrom[startIdx].second;
    std::cout << "Node sequence (" << residualSetIdx.size() << " points): ";
    do {
        const auto [_, nextIdx] = maxPathFromPP[std::make_pair(scrollIdx, residualSetIdx)];
        residualSetIdx.erase(scrollIdx);
        std::cout << pointToStr(knotPoints[scrollIdx]) << " -[" << distancesIdx[scrollIdx][nextIdx]
                  << "]> ";
        residualSetIdx.erase(scrollIdx);
        scrollIdx = nextIdx;
    } while (scrollIdx != goalIdx);
    std::cout << pointToStr(goalP) << '\n';
    std::cout << "\nResult: " << res << "\n\n\n";
    return res;
}

int main23p2()
{
    try {
        day23Part2(Input, false, false);
        // day23Part2("./23_input_file.txt",true, false);
    } catch (std::invalid_argument& ex) {
        std::cout << std::endl; // in order to flash
        std::cerr << "Bad input: " << ex.what() << std::endl;
        return 1;
    } catch (std::exception& ex) {
        std::cout << std::endl; // in order to flash
        std::cerr << "Error: " << ex.what() << std::endl;
        return 1;
    } catch (...) {
        std::cout << std::endl; // in order to flash
        std::cerr << "Unknown error: " << std::endl;
        return 1;
    }

    return 0;
}


/*
OUTPUT:

Example:
Lines count 23
Tiles (including arrows) count 191
Arrow count 22
Number of knot tiles: 9
Number of connections: 12
Number of cycles: 9
Number of points and paths: 65
Node sequence (9 points): (1, 0) -[15]> (3, 5) -[22]> (5, 13) -[38]> (13, 19) -[10]> (13, 13) -[24]> (11, 3) -[30]> (21, 11) -[10]> (19, 19) -[5]> (21, 22)
Result: 154

Real input:
Lines count 141
Number of knot tiles: 36
Tiles (including arrows) count 9316
Arrow count 118
Number of connections: 60
Number of cycles: 36
Number of points and paths: 11581284
Node sequence (35 points): (1, 0) -[147]> (5, 19) -[216]> (37, 19) -[226]> (55, 11) -[178]> (57, 43) -[152]> (81, 39) -[250]> (85, 5) -[196]> (109, 13) -[396]> (125, 37) -[288]> (135, 67) -[298]> (103, 53) -[94]> (101, 85) -[190]> (137, 79) -[236]> (135, 109) -[126]> (105, 105) -[174]> (75, 101) -[126]> (57, 109) -[116]> (55, 83) -[184]> (87, 87) -[90]> (85, 67) -[204]> (59, 57) -[86]> (43, 67) -[308]> (33, 29) -[64]> (19, 35) -[296]> (15, 67) -[126]> (9, 83) -[156]> (37, 75) -[218]> (37, 109) -[238]> (5, 103) -[472]> (37, 131) -[256]> (67, 129) -[92]> (79, 125) -[238]> (107, 127) -[186]> (131, 137) -[31]> (139, 140)
Result: 6654
*/
